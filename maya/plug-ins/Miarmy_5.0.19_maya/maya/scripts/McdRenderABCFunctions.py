## +
## ===================================================================
## Copyright(C) 2010 - 2014 Basefount Software Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## Limitd. ("Basefount") and/or its licensors, which is
## protected by Chinese copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdRenderABCFunctions.py
##
##  Description:
##    Create Alembic cache for agents
##
## ===================================================================
## -

import os
import shutil
import maya.cmds as cmds
import maya.mel as mel
import McdPlacementFunctions
from McdGeneral import *

def McdCreateAlembicCache():
    
    # write out alembic shader file
    
    # find all agent geo -------------------------------------------------------
    allGeoGrp = cmds.ls("MDGGrp_*", type = "transform")
    if McdIsBlank(allGeoGrp):
        return
    
    allGeos = []
    for i in range(len(allGeoGrp)):
        allGeoList = cmds.listRelatives(allGeoGrp[i], c = True, path = True)
        allGeos.extend(allGeoList)

    if allGeos == []:
        return
    
    # find all shaders ---------------------------------------------------------
    allShdGrp = []
    for i in range(len(allGeos)):
        allConns = cmds.listConnections(allGeos[i], d = True, s = False)
        if McdIsBlank(allConns):
            continue
        for j in range(len(allConns)):
            if cmds.nodeType(allConns[j]) == "shadingEngine":
                allShdGrp.append(allConns[j])
    if allShdGrp == []:
        return
        
    allShaders = []
    for i in range(len(allShdGrp)):
        allConns = cmds.listConnections(allShdGrp[i], s = True, d = False, p = True)
        if McdIsBlank(allConns):
            continue
        for j in range(len(allConns)):
            if allConns[j].find(".outColor") > 0:
                shaderName = allConns[j].split(".outColor")[0]
                allShaders.append(shaderName)
            ############### v add v ###############
            elif allConns[j].find(".outValue") > 0:
                shaderName = allConns[j].split(".outValue")[0]
                allShaders.append(shaderName)
            ############### ^ add ^ ###############

    if allShaders == []:
        return
    
    globalNode = McdGetMcdGlobalNode()
    
    outFolder = cmds.getAttr(globalNode + ".outMD2Folder")
    outName = cmds.getAttr(globalNode + ".outMD2Name")
    
    outFile = outFolder + "/" + outName + "_shader.txt"
    
    f = open(outFile, "w")
    
    for i in range(len(allShaders)):
        f.write(allShaders[i])
        f.write("\r\n")
        
    f.close()


def McdImportAlembicCache():
    
    # clear exist contents;
    # read export path name from MGlobal
    # read export file name from MGlobal
    # check availablity
    # create extra path
    # execute
    
    globalNode = McdGetMcdGlobalNode()
    
    outFolder = cmds.getAttr(globalNode + ".outMD2Folder")
    outName = cmds.getAttr(globalNode + ".outMD2Name")
    
    outFile = outFolder + "/" + outName + "_shader.txt"
    
    if not os.access(outFile, os.R_OK):
        pass
    
    f = open(outFile, "r")
    readContents = f.read()
    shaderList = readContents.split("\r\n")
    
    if MIsBlank(shaderList):
        return
        
    allGeoGrp = cmds.ls("MDGGrp_*")
    if MIsBlank(allGeoGrp):
        return
    
    counter = 0
    for i in range(len(allGeoGrp)):
        stri = str(i)
        rootNode = "MDGGrp_" + stri
        allChild = cmds.listRelatives(rootNode, p = False, c = True)
        if MIsBlank(allChild):
            continue
        for j in range(len(allChild)):
            cmds.select(allChild[j])
            try:
                cmds.hyperShade( assign = shaderList[counter] )
            except:
                pass
            
            counter += 1
            

def McdClearWithoutDelShaders():
    allGeoGrp = cmds.ls("MDGGrp_*")
    
    cmds.delete(allGeoGrp)






















