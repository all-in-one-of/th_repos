## +
## ===================================================================
## Copyright(C) 2010 - 2013 Basefount Software Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## Limited. ("Basefount") and/or its licensors, which is
## protected by Chinese copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdPipelineCommands
##
##  Description:
##    Functions will not touch any GUI
##
## ===================================================================
## -

import maya.cmds as cmds
import maya.mel as mel
import os
import McdGeneral
import struct

McdSTILL    = (0,0,0,0,0,0)
McdFORWARDZ = (0,0,1,0,0,0)
McdFORWARD  = (1,0,1,0,0,0)
McdCLIMB    = (0,1,1,0,0,0)
McdTURN     = (1,0,1,0,1,0)
McdRAMP     = (1,1,1,0,1,0)
McdFREE     = (1,1,1,1,1,1)


def CheckStringIsValid(inString):
    isValid = True;
    if len(inString) >0:
        if inString[0].isalpha() == False:
            isValid = False
            return isValid;
        for i in range(len(inString)):
            if inString[i].isdigit() == False:
                if inString[i].isalpha() == False:
                    if inString[i] != "_":        
                        isValid = False
                        return isValid;
        return isValid;
    else:
        isValid = False
        return isValid;
    
def stepIntoActionSetupWizardParam(actionNode, isCycle, cycleFilter, isTransit, tranIn, tranOut, locomotionType, rate, isFinal):
    
    cmds.setAttr(actionNode + ".txState", locomotionType[0])
    cmds.setAttr(actionNode + ".tyState", locomotionType[1])
    cmds.setAttr(actionNode + ".tzState", locomotionType[2])
    cmds.setAttr(actionNode + ".rxState", locomotionType[3])
    cmds.setAttr(actionNode + ".ryState", locomotionType[4])
    cmds.setAttr(actionNode + ".rzState", locomotionType[5])


    cmds.setAttr(actionNode + ".rate", rate)
    cmds.setAttr(actionNode + ".isFinalAction", isFinal)

    cycFlag = 1
    isTrans = isTransit
    
    if isTrans == 1:
        cmds.setAttr(actionNode + ".isCycle", 0)
        cycFlag = 0

    
    if cycFlag == 1:
        cycRange = cycleFilter
        if int(cycRange) <= 30:
            cmds.setAttr(actionNode + ".cycleFilter", float(cycRange) / 100.0)
        else:
            cmds.setAttr(actionNode + ".cycleFilter", .3)

    transIn = tranIn
    if int(transIn) <= 100:
        cmds.setAttr(actionNode + ".transIn", float(transIn) / 100.0)
    else:
        cmds.setAttr(actionNode + ".transIn", 1)

    transOut = tranOut

    transIn = cmds.getAttr(actionNode + ".transIn")
    transIn *= 100.0
    
    if float(transOut) <= 100.0:
        if float(transOut) < transIn:
            raise Exception("Your input is smaller than transition in, we use transition in.")
            cmds.setAttr(actionNode + ".transOut", transIn / 100.0)
        else:
            cmds.setAttr(actionNode + ".transOut", float(transOut) / 100.0)
    else:
        cmds.setAttr(actionNode + ".transOut", 1)

    
    # rebuild last;
    mel.eval("McdSetAgentDataCmd;")



# //////////////////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////////////////


# create action node for active agent:
# example: McdCreateActionNode("walk", 0, 25, 1, 10, 0, 10, 80)
# the rate and isFinal by default.
def McdCreateActionNode(inActionName = "",
                        startFrame = 0, endFrame = 10,
                        isCycle = 1, cycleFilter = 10,
                        isTransit = 0, tranIn = 10, tranOut = 80,
                        locomotionType = McdSTILL,
                        rate = 1,
                        isFinal = 0):
    # parse origianl agent group
    # and the root bone:(select the root bone)
    
    orgMinTime = cmds.playbackOptions(q = True, min = True)
    orgMaxTime = cmds.playbackOptions(q = True, max = True)
    
    cmds.playbackOptions(e = True, min = startFrame)
    cmds.playbackOptions(e = True, max = endFrame)
    
    allMcdGlobal = cmds.ls(type = "McdGlobal");
    if allMcdGlobal == [] or allMcdGlobal == None:
        raise Exception("No found Miarmy Global, please create it in \"Miarmy > Miarmy Global\"")
    
    globalNode = allMcdGlobal[0]
    activeAgentName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(activeAgentName)
    if isValid == True:
        miarmyGrp = cmds.ls("Miarmy_Contents")
        if miarmyGrp == [] or miarmyGrp == None:
            raise Exception("Cannot find Miarmy_Contents group.")
        
        agentGrp = cmds.ls("Agent_" + activeAgentName)
        if agentGrp == [] or agentGrp == None:
            raise Exception("Cannot find Agent group, cannot create action node for this active agent.")
        
        setupGrp = cmds.ls("Setup_" + activeAgentName)
        if setupGrp == [] or setupGrp == None:
            raise Exception("Cannot find Agent setup rig group, cannot create action node for this active agent.")
            
        actGrp = cmds.ls("Action_" + activeAgentName)
        if actGrp == [] or actGrp == None:
            cmds.group(n = "Action_" + activeAgentName, em = True)
            try:
                cmds.parent("Action_" + activeAgentName, "Agent_" + activeAgentName)
            except:
                raise Exception("May be you have naming problem, check it firstly in \"Miarmy > Miarmy Contents Check.\"")
            
        cmds.select("Setup_" + activeAgentName)
        # set name
        startTime = cmds.playbackOptions(q = True, min = True)
        endTime = cmds.playbackOptions(q = True, max = True)
        
        newAction = inActionName
        isVaild = CheckStringIsValid(newAction)
        if isVaild == True:
            newActionNodeName = newAction + "_action_" + activeAgentName
            actGrp = cmds.ls(newActionNodeName)
            if actGrp == [] or actGrp == None:
                newNodeName = mel.eval("McdCreateActionCmd;")
                try:
                    cmds.select(newNodeName)
                    cmds.parent(newNodeName, "Action_" + activeAgentName)
                except:
                    raise Exception("May be you have naming problem, check it firstly in \"Miarmy > Miarmy Contents Check.\"")
                try:
                    selObj = cmds.ls(sl = True)[0]
                    cmds.rename(selObj, newActionNodeName)
                except:
                    raise Exception("Naming node error, please rename it manually: <actionName>_action_<agentName>")
                
                actionNode = cmds.ls(sl = True)[0]
                stepIntoActionSetupWizardParam(actionNode, isCycle, cycleFilter, isTransit, tranIn, tranOut, locomotionType, rate, isFinal)
                
            else:
                raise Exception("Action name exist.")
                cmds.select(actGrp)
        else:
            raise Exception("The new action name: \"" + newAction + "\" you specified is invalid.")
    
    cmds.playbackOptions(e = True, min = orgMinTime)
    cmds.playbackOptions(e = True, max = orgMaxTime)
    
    
# return correct McdGlobal node
def McdGetMcdGlobal():
    allMcdGlobal = cmds.ls(type = "McdGlobal");
    if allMcdGlobal != [] and allMcdGlobal != None:
        return mel.eval("McdSimpleCommand -exe 2;")
    else:
        raise Exception("No found Miarmy Global, please create it in \"Miarmy > Miarmy Ready\"")
    
    
# list out the agent type names and color ids
# example: # Result: [[u'casual', u'snake'], [1, 4]] #
def McdGetAgentTypeInfo():
    result = McdGetAllAgentTypeNIDWithColor()
    return result

# active agent type
# usage : McdActiveAgentType("casual")
def McdActiveAgentType(agentTypeName):
    globalNode = McdGetMcdGlobal()
    agentName = agentTypeName
    cmds.setAttr(globalNode + ".activeAgentName", agentName, type = "string")
    
    
# add var into the specified node agent group or var host
# usage: McdInsertAgentVar("Agent_Casual", "aaa", 0, 30)
# usage: McdInsertAgentVar("McdVarHost2", "aaa", 0, 30)
def McdInsertAgentVar(agentGroupOrVarHostNode, avName, avMin, avMax):
    insertId = 0
    
    while(1):
        active = cmds.getAttr(agentGroupOrVarHostNode + ".avActive[" + str(insertId) + "]")
        if active == 0: 
            break
        insertId +=1
    
    # active    
    cmds.setAttr(agentGroupOrVarHostNode + ".avActive[" + str(insertId) + "]", True)
    
    # insert contents:
    cmds.setAttr(agentGroupOrVarHostNode + ".avNames[" + str(insertId) + "]", avName, type = "string")
    cmds.setAttr(agentGroupOrVarHostNode + ".avMin[" + str(insertId) + "]", avMin)
    cmds.setAttr(agentGroupOrVarHostNode + ".avMax[" + str(insertId) + "]", avMax)
    
    
# create a var host node and put it in right place.
def McdCreateVarHost():
    # context check:
    miarmyMain = cmds.ls("Miarmy_Contents")
    if miarmyMain == [] or miarmyMain == None:
        raise Exception('Cannot find "Miarmy_Contents" Group.')

    windNode = cmds.createNode("McdVarHost")

    # put the zone to the perception_set
    perceptionGrp = cmds.ls("AttrHost_Set")
    if perceptionGrp == [] or perceptionGrp == None:
        #create one and parent
        cmds.group(n = "AttrHost_Set", em = True)
        cmds.parent("AttrHost_Set", "Miarmy_Contents")
    try:
        parentTemp = cmds.listRelatives("AttrHost_Set", c = False, p = True)[0]
        if parentTemp != "Miarmy_Contents":
            cmds.parent("AttrHost_Set", "Miarmy_Contents")
    except:
        pass
    try:
        cmds.parent(windNode, "AttrHost_Set")
    except:
        pass
    
# connect to correct plug from var host node to place/agentgroup
# example: McdConnectVarHostToPlaceOrAgentGroup("McdVarHost3", "McdPlace0Shape")
def McdConnectVarHostToPlaceOrAgentGroup(varNode, agentGroupOrPlaceNode):
    count = 0
    while(1):
        try:
            cmds.connectAttr(varNode + ".toAgentGroup", agentGroupOrPlaceNode + ".groupVar[" + str(count) + "]")
            break
        except:
            count += 1
        
        if count > 1000:
            raise Exception("cannot connect! Abort");
    
    
    



#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# below functions are the functions for the tutorials:
#-------------------------------------------------------------------------------


def establishMasterSlave(place1, place2):
    
    placeNode1 = "McdPlace" + str(place1)
    placeNode2 = "McdPlace" + str(place2)
    
    plid1 = cmds.getAttr(placeNode1 + ".plid")
    plid2 = cmds.getAttr(placeNode2 + ".plid")
    
    allAgents = cmds.ls(type = "McdAgent")
    agentInPlace1 = []
    agentInPlace2 = []
    
    for i in range(len(allAgents)):
        aplid = cmds.getAttr(allAgents[i] + ".plid")
        if aplid == plid1:
            agentInPlace1.append(allAgents[i])
        if aplid == plid2:
            agentInPlace2.append(allAgents[i])
            
    nbAgent = len(agentInPlace1)
    if len(agentInPlace2) < nbAgent:
        nbAgent = len(agentInPlace2)
    
    
    for i in range(nbAgent):
        agent1 = agentInPlace1[i]
        agent2 = agentInPlace2[i]
        
        cmds.connectAttr(agent1 + ".masterOf", agent2 + ".masterOf")

    
def combatPairPlacement():
    for i in range(500):    
        stri1 = str(i+1)
        stri2 = str(i+1+500)
        
        ax = cmds.getAttr("McdAgent" + stri1 + ".tx")
        ay = cmds.getAttr("McdAgent" + stri1 + ".ty")
        az = cmds.getAttr("McdAgent" + stri1 + ".tz")
        
        bx = cmds.getAttr("McdAgent" + stri2 + ".tx")
        by = cmds.getAttr("McdAgent" + stri2 + ".ty")
        bz = cmds.getAttr("McdAgent" + stri2 + ".tz")
        
        mx = 0.5 * ax + 0.5 * bx
        my = 0.5 * ay + 0.5 * by
        mz = 0.5 * az + 0.5 * bz
        
        cmds.setAttr("locator1.tx", mx)
        cmds.setAttr("locator1.ty", my)
        cmds.setAttr("locator1.tz", mz)
    
        cmds.select(["McdAgent" + stri2, "McdAgent" + stri1, "locator1"])
        cmds.parent()
        
        # rotate
        cmds.select("locator1")
        seedStr = str(random.random()* 360)
        print i
        print seedStr
        mm.eval("rotate -r -os 0 " + seedStr + " 0 ;")
        
        cmds.parent("McdAgent" + stri2, w = 1)
        cmds.parent("McdAgent" + stri1, w = 1)
    
def controlSin(agentIDFloat):
    agentID = int(agentIDFloat)
    row = agentID % 33;
    col = agentID / 33;
        
    rowVar = float(row) / 5.0
    colVar = float(col) / 5.0

    atime = cmds.currentTime(q = True)
    atime /= 2

    rowResult = math.sin(rowVar + atime)  * 2.0 
    colResult = math.sin(colVar + atime)  
    
    return rowResult + colResult
    

def exportABCCacheByCharCache(nbAgent, abcFolder):
    selObjs = cmds.ls(sl = True)
    if selObjs == None or selObjs == []:
        return
    
    objStr = ""
    for i in range(len(selObjs)):
        objStr += "-root " + selObjs[i] + " "
    
    cmds.setAttr("McdBrain1.enableChar", 1)    # enable character cache
    for i in range(nbAgent):                 # iterate number of agents
        cmds.setAttr("McdBrain1.charId", i)    # set drive character id
        minTime = int(cmds.playbackOptions(q = True, min = True))    # get start frame
        maxTime = int(cmds.playbackOptions(q = True, max = True))    # get end frame
        
        stri = str(i+1)                        # change char id to string
        
        frameRangeStr = str(minTime) + " " + str(maxTime)
        
        cmds.currentTime(minTime)
        
        cmd = 'AbcExport -j "-frameRange ' + frameRangeStr + " -uvWrite " + objStr + '-file ' + abcFolder + '/charCacheABC.' + stri + '.abc";'
        mel.eval(cmd)

                                             #--------------------------
    cmds.setAttr("McdBrain1.enableChar", 0)    # turn off 
    cmds.setAttr("McdBrain1.charId", -1)       # turn off
    
    
def McdFixZRotate_SimPost():
    allAgents = cmds.ls(type = "McdAgent")
    if allAgents == [] or allAgents == None:
        return
    
    allAgtTrans = []
    for i in range(len(allAgents)):
        
        rotVal = cmds.particle("particle2", q = True, attribute = "MR_Y", id = i)
        
        parentNode = cmds.listRelatives(allAgents[i], p = True, c = False)[0]
        
        cmds.setAttr(parentNode + ".rx", rotVal[0])
        cmds.setAttr(parentNode + ".ry", rotVal[1])
        cmds.setAttr(parentNode + ".rz", rotVal[2])


    
    

    

def McdGetAgentAttrInfo(startAgent = 1, endAgent = 1):
    
    # setup the start/end agent id
    globalNode = McdGetMcdGlobal()
    cmds.setAttr(globalNode + ".floatMaster[17]", float(startAgent) + 0.01)
    cmds.setAttr(globalNode + ".floatMaster[18]", float(endAgent) + 0.01)
    
    # run command and get info
    attrInfo = mel.eval("McdSimpleCommand -exe 21;")
    
    return attrInfo

    
    
def McdGetPreAgentAttrInfo(startAgent = 1, endAgent = 1):
    
    # setup the start/end agent id
    globalNode = McdGetMcdGlobal()
    cmds.setAttr(globalNode + ".floatMaster[17]", float(startAgent) + 0.01)
    cmds.setAttr(globalNode + ".floatMaster[18]", float(endAgent) + 0.01)
    
    # run command and get info
    attrInfo = mel.eval("McdSimpleCommand -exe 22;")
    
    return attrInfo
    
    
def McdGetAgentAttrInfo2(startAgent = 1, endAgent = 1, sf = 1, ef = 1):
    
    globalNode = McdGetMcdGlobal()
    
    if not cmds.getAttr(globalNode + ".enableCache"):
        raise Exception("only work with cached scene.")
    
    cacheFolder = cmds.getAttr(globalNode + ".cacheFolder")
    cacheName = cmds.getAttr(globalNode + ".cacheName")
    nbFrame = ef - sf + 1
    
    totalContents = []
    for i in range(nbFrame):
        
        currentFrameStr = str(i + sf)
        varCache = cacheFolder + "/" + cacheName + "." + currentFrameStr + ".mva"
        
        thisFrameContent = []
        if os.access(varCache, os.R_OK):
            f = open(varCache, "r")
            isStartRecord = False
            for lineContents in f.readlines():
                if lineContents.find("\r") >= 0:
                    lineContents = lineContents.split("\r")[0]
                else:
                    lineContents = lineContents.split("\n")[0]
                
                if lineContents.find(":") == 0:
                    allSegs = lineContents.split(':')
                    if int(allSegs[-1]) >= startAgent:
                        isStartRecord = True
                    if int(allSegs[-1]) > endAgent:
                        isStartRecord = False
                        
                    if isStartRecord:
                        thisFrameContent.append("#" + allSegs[-1])
                        
                if isStartRecord:
                    if len(lineContents) > 0:
                        if lineContents.find(":") >= 0:
                            allSegs = lineContents.split(':')
                            thisFrameContent.append(allSegs[-1])
                        else:
                            thisFrameContent.append(lineContents)
                        
            f.close()
    
        totalContents.append(thisFrameContent)
        
    return totalContents
    
    
    
def McdGetSelAgentBoneNameList():
    
    selObj = McdGeneral.getSelection("McdAgent")
    cmds.select(selObj)
    melCmd = "McdSimpleCommand -exe 23;"
    mel.eval(melCmd)


def McdGetSelAgentPose():
    
    selObj = McdGeneral.getSelection("McdAgent")
    cmds.select(selObj)
    melCmd = "McdSimpleCommand -exe 27;"
    boneData = mel.eval(melCmd)
    
    return boneData
    
    
def McdSetSelAgentPose(nbBone, boneData):
    
    selObj = McdGeneral.getSelection("McdAgent")
    cmds.select(selObj)
    
    globalNode = McdGeneral.McdGetMcdGlobalNode()
    cmds.setAttr(globalNode + ".tempBoneData[0]", float(nbBone)+0.01)
    for i in range(len(boneData)):
        cmds.setAttr(globalNode + ".tempBoneData[" + str(i+1) + "]", boneData[i])
    
    melCmd = "McdSimpleCommand -exe 24;"
    success = mel.eval(melCmd)
    
    if not success:
        raise Exception("Incorrect bone number");
    
    
def testCustomCache():
    
    testBoneData = [-0.9109042286872864, 17.77139663696289, 1.7763568394002505e-15,
                    4.351945877075195, 0.24190232157707214, -1.1737905740737915,
                    0.0, 5.19242525100708, 7.422768533160706e-08,
                    -1.8275039196014404, -2.0929672718048096, 2.2050375938415527,
                    0.0, 2.618999481201172, 4.686355470351344e-15,
                    9.211305618286133, -1.7918733358383179, 2.3506288528442383,
                    0.0, 1.9251139163970947, 1.7519469963644951e-07,
                    5.334269046783447, -1.1708780527114868, 3.684237003326416,
                    -1.3877787807814457e-17, 2.8377585411071777, -1.7353458758861962e-07,
                    -5.852939128875732, 1.132465124130249, -1.120607614517212,
                    1.3877787807814457e-17, 1.0813418626785278, -9.505111142615874e-10,
                    -0.779792070388794, 0.7471972703933716, -1.24141526222229,
                    -1.124100812432971e-15, 2.4183804988861084, 1.7763568394002505e-15,
                    0.0, 0.0, 0.0,
                    1.1911394596099854, 0.8291517496109009, -0.6883943676948547,
                    -11.460867881774902, 5.047320365905762, 10.649935722351074,
                    2.78566575050354, -1.0658141036401503e-14, -5.283124604460454e-09,
                    2.75199294090271, 8.691839218139648, -88.2719497680664,
                    4.473726272583008, 1.0658141036401503e-14, -2.7640821187446818e-08,
                    3.6008594036102295, -35.11144256591797, -7.912487030029297,
                    5.275150775909424, 0.0, -3.0652834936972795e-08,
                    26.34114646911621, 16.356204986572266, 2.5095672607421875,
                    1.2764863967895508, 3.552713678800501e-15, -1.249000902703301e-16,
                    0.0, 0.0, 0.0,
                    -1.1911399364471436, 0.8291991949081421, -0.6883994340896606,
                    170.74020385742188, -0.42101889848709106, 0.31191834807395935,
                    -2.7856643199920654, 1.4210854715202004e-14, 9.46707103821609e-08,
                    -0.5270073413848877, -5.9067606925964355, -76.41822052001953,
                    -4.473724365234375, -1.0658141036401503e-14, -3.0747372647965676e-07,
                    0.27449527382850647, -12.841955184936523, -1.2815144062042236,
                    -5.275158405303955, 1.7763568394002505e-14, 3.952162899167888e-07,
                    16.087688446044922, 5.216227054595947, 5.3578619956970215,
                    -1.2764999866485596, 2.0711681258944736e-09, 6.106226635438361e-16,
                    3.194530108885374e-06, 0.0, 0.0,
                    -1.8440637588500977, -1.2102711200714111, 0.00490235211327672,
                    74.73561096191406, -26.516565322875977, -90.04898071289062,
                    6.649638652801514, -2.3301286944388266e-07, -1.9817466068161593e-07,
                    177.29388427734375, 8.320201873779297, -37.086978912353516,
                    8.77270221710205, -6.160385055409279e-07, -7.843405569474271e-07,
                    169.06649780273438, 27.18815040588379, -90.36639404296875,
                    2.243800163269043, 3.723780039877056e-08, -1.1284389955790175e-07,
                    0.20204997062683105, 0.23194104433059692, 18.951711654663086,
                    1.389804482460022, 5.551115123125783e-16, 2.4424906541753444e-15,
                    0.0, 90.00003051757812, 0.0,
                    1.8440600633621216, -1.210292100906372, 0.004901260137557983,
                    -91.86898803710938, 21.55236053466797, 102.38734436035156,
                    -6.6496195793151855, 2.0762941232987941e-07, -4.440892098500626e-15,
                    171.40194702148438, 13.526954650878906, -64.56562805175781,
                    -8.772698402404785, 3.044344225600071e-07, 1.0457869166202727e-06,
                    174.98123168945312, 17.754838943481445, -72.10533905029297,
                    -2.24379825592041, 2.937549879789003e-06, 1.337408122026318e-07,
                    0.17245787382125854, 0.07529933750629425, 19.52066993713379,
                    -1.3898099660873413, -9.992007221626409e-16, 0.0,
                    0.0, 90.00003051757812, 0.0]
    
    allAgents = cmds.ls(type = "McdAgent")
    for i in range(len(allAgents)):
        cmds.select(allAgents[i])
        McdSetSelAgentPose(27, testBoneData)
        
        
        
        
def McdFollowPartile1():
    # test lattice selected?
    # read info from mesh    

    allLoc = cmds.ls(type="particle")
    
    sumCount = 0
    for i in range(len(allLoc)):
        nbParticle = cmds.getAttr( allLoc[i] + '.count' )
        sumCount += nbParticle
    
    allAgt = cmds.ls(type="McdAgent")
    allAgtP = []
    for i in range(len(allAgt)):
        pN = cmds.listRelatives(allAgt[i], p = True, c = True)[0]
        allAgtP.append(pN)
 
    pCount = 0
    for i in range(len(allLoc)):
        nbParticle = cmds.getAttr( allLoc[i] + '.count' )
        for j in range(nbParticle):
            strj = str(j)
            strp = str(pCount)
            tdata=cmds.xform(allLoc[i] + '.pt[' + strj + ']', q = True, t = True, ws = True)

            cmds.setAttr(allAgtP[pCount] + ".tx", tdata[0])
            cmds.setAttr(allAgtP[pCount] + ".ty", tdata[1])
            cmds.setAttr(allAgtP[pCount] + ".tz", tdata[2])
            
            pCount += 1
            
            
            
def McdReadCharCache(folderPath, frame):

    # Usage:
    ''' McdReadCharCache('E:/abc/_charCacheAPITest/agent2.mcc', 12); '''
    
    fileData = open(folderPath,'rb')
    startFrame = struct.unpack("f"*1, fileData.read(4*1))
    print "start frame: " + str(startFrame)
    endFrame = struct.unpack("f"*1, fileData.read(4*1))
    print "end frame: " + str(endFrame)
    blockSize = struct.unpack("f"*1, fileData.read(4*1))
    print "blockSize frame: " + str(blockSize)
    
    frame -= int((startFrame[0]))
    
    if frame >= int((endFrame[0])):
        raise Exception("exceed max frame")
        return
    
    fileData.seek(int(blockSize[0]) * 4* frame, 1)
    
    poseData = struct.unpack("f"*int(blockSize[0]), fileData.read(4*int(blockSize[0])))
    print poseData
    fileData.close()
    

def McdReadCharCacheAgentIDList(filePath):

    # Usage:
    ''' E:/abc/_charCacheAPITest/AgentIDList.mid '''
    ''' E:/abc/_charCacheAPITest/AgentTypeList.mbc '''
    
    fileData = open(filePath,'rb')
    nbAgentTuple = struct.unpack("f"*1, fileData.read(4*1))
    print "nbAgent: " + str(nbAgentTuple)
    nbAgent = nbAgentTuple[0]

    poseData = struct.unpack("f"*int(nbAgent), fileData.read(4*int(nbAgent)))
    print poseData
    

    fileData.close()
            
            
def McdReadCharCacheAgentTypeList(filePath):

    # Usage:
    ''' E:/abc/_charCacheAPITest/AgentIDList.mid '''
    ''' E:/abc/_charCacheAPITest/AgentTypeList.mbc '''
    
    fileData = open(filePath,'rb')
    nbAgentTuple = struct.unpack("f"*1, fileData.read(4*1))
    print "nbAgent: " + str(nbAgentTuple)
    nbAgent = nbAgentTuple[0]

    poseData = struct.unpack("f"*int(nbAgent), fileData.read(4*int(nbAgent)))
    print poseData
    

    fileData.close()
            
            
            
            
            
            


    
    