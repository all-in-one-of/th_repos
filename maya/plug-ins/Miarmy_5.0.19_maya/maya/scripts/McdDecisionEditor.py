## +
## ===================================================================
## Copyright(C) 2010 - 2014 Basefount Software Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## Limitd. ("Basefount") and/or its licensors, which is
## protected by Chinese copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNTAIN 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdDecisionEditorGUI.py
##
##  Description:
##    Deal with details of McdDecisionNode.
##
## ===================================================================
## -

import maya.cmds as cmds
from McdGeneral import *
from McdDecisionEditorGUI import *
from McdSentencePresetListGUI import *
from McdDecisionPresetListGUI import *

def getIdString(i):
    if i == 0:
        return "A"
    elif i == 1:
        return "B"
    elif i == 2:
        return "C"
    elif i == 3:
        return "D"
    elif i == 4:
        return "E"
    elif i == 5:
        return "F"
    elif i == 6:
        return "G"
    elif i == 7:
        return "H"
    elif i == 8:
        return "I"
    elif i == 9:
        return "J"
    elif i == 10:
        return "K"
    elif i == 11:
        return "L"
    elif i == 12:
        return "M"
    elif i == 13:
        return "N"
    elif i == 14:
        return "O"
    elif i == 15:
        return "P"
    elif i == 16:
        return "Q"
    elif i == 17:
        return "R"
    elif i == 18:
        return "S"
    elif i == 19:
        return "T"
    elif i == 20:
        return "U"
    elif i == 21:
        return "V"
    elif i == 22:
        return "W"
    elif i == 23:
        return "X"
    elif i == 24:
        return "Y"
    elif i == 25:
        return "Z"
    
def McdDecisionGetNodeNameFromGUI():
    decisionNode = ""
    decisionName = cmds.textField("DecisionNodeName", q = True, tx = True)
    if isReferenceScene():
        decisionNode = decisionName
    else:
        activeAgent = McdGetActiveAgentName()
        decisionNode = decisionName + "_decision_" + activeAgent;
    return decisionNode

def switchDecisionOnOff():
    dsnNode = McdDecisionGetNodeNameFromGUI()
    if cmds.getAttr(dsnNode + ".enable") == 1:
        cmds.setAttr(dsnNode + ".enable", 0)
    else:
        cmds.setAttr(dsnNode + ".enable", 1)
    McdRefreshDecisionEditor()
    
def switchOldMode():
    dsnNode = McdDecisionGetNodeNameFromGUI()
    if cmds.getAttr(dsnNode + ".lggmode") == 1:
        cmds.setAttr(dsnNode + ".lggmode", 0)
    else:
        cmds.setAttr(dsnNode + ".lggmode", 1)
    McdRefreshDecisionEditor()

def switchDecisionMode():
    dsnNode = McdDecisionGetNodeNameFromGUI()
    if cmds.getAttr(dsnNode + ".absMode") == 1:
        cmds.setAttr(dsnNode + ".absMode", 0)
    else:
        cmds.setAttr(dsnNode + ".absMode", 1)
    McdRefreshDecisionEditor()

def switchExpressionMode():
    dsnNode = McdDecisionGetNodeNameFromGUI()
    if cmds.getAttr(dsnNode + ".skipFuzzy") == 1:
        cmds.setAttr(dsnNode + ".skipFuzzy", 0)
    else:
        cmds.setAttr(dsnNode + ".skipFuzzy", 1)
    McdRefreshDecisionEditor()
    
def switchFullFuzzyMode():
    dsnNode = McdDecisionGetNodeNameFromGUI()
    if cmds.getAttr(dsnNode + ".fullFuzzy") == 1:
        cmds.setAttr(dsnNode + ".fullFuzzy", 0)
    else:
        cmds.setAttr(dsnNode + ".fullFuzzy", 1)
    McdRefreshDecisionEditor()


# active and de-active:
def cb_dn_active(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    cmds.setAttr(dsnNode + ".active[" + str(index) + "]", True)
    McdRefreshDecisionEditor()
def cb_dn_deActive(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    cmds.setAttr(dsnNode + ".active[" + str(index) + "]", False)
    McdRefreshDecisionEditor()
  
def cb_dno_active(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    cmds.setAttr(dsnNode + ".outputActive[" + str(index) + "]", True)
    McdRefreshDecisionEditor()
def cb_dno_deActive(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    cmds.setAttr(dsnNode + ".outputActive[" + str(index) + "]", False)
    McdRefreshDecisionEditor()
    
    
# priority
def in_dn_prio(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    value = cmds.intField("if_dn_priority" + str(index), q = True, v = True)
    cmds.setAttr(dsnNode + ".priority[" + str(index) + "]", value)
    upDataParseDecisionString()
    
#logic
def om_dn_logic(index):
    # 0: and &&
    # 1: or  ||
    value = cmds.optionMenu("if_dn_logic" + str(index), q = True, v = True)
    dLogic = 0
    newValue = "&&"
    if value == "||":
        dLogic = 1
        newValue = "||"
    elif value == "xor":
        dLogic = 2
        newValue = "xor"
    dsnNode = McdDecisionGetNodeNameFromGUI()
    cmds.setAttr(dsnNode + ".logic[" + str(index) + "]", dLogic)
    cmds.optionMenu("if_dn_logic" + str(index), e = True, v = newValue)
    upDataParseDecisionString()
        
def setupOmDecisionLogic(dLogic, stri):
    cmds.menuItem(label = "&&")
    cmds.menuItem(label = "||")
    cmds.menuItem(label = "xor")
    # 0: and &&
    # 1: or  ||
    valueL = "&&"
    if dLogic == 1:
        valueL = "||"
    elif dLogic == 2:
        valueL = "xor"
    cmds.optionMenu("if_dn_logic" + stri, e = True, v = valueL)

#input type:
def om_dn_inTyp(index):
    # 0: and &&
    # 1: or  ||
    value = cmds.optionMenu("if_dn_inTyp" + str(index), q = True, v = True)
    dInTyp = 0
    newValue = "Best One"
    if value == "All Members":
        dInTyp = 1
        newValue = "All Members"
    dsnNode = McdDecisionGetNodeNameFromGUI()
    cmds.setAttr(dsnNode + ".inputType[" + str(index) + "]", dInTyp)
    cmds.optionMenu("if_dn_inTyp" + str(index), e = True, v = newValue)
    upDataParseDecisionString()

def setupOmDecisionInTyp(dInTyp, stri):
    cmds.menuItem(label = "Best One")
    cmds.menuItem(label = "All Members")
    # 0: max
    # 1: average
    valueL = "Best One"
    if dInTyp == 1:
        valueL = "All Members"
    cmds.optionMenu("if_dn_inTyp" + stri, e = True, v = valueL)

#false
        
def cb_dns_False_on(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    cmds.checkBox("cd_dn_false" + str(index), e = True, v = 1)
    cmds.setAttr(dsnNode + ".not[" + str(index) + "]", 1)
    newText = "not " + getIdString(index) + " "
    cmds.text("t_dn_id" + str(index), e = True, l = newText)
    upDataParseDecisionString()
    
    
def cb_dns_False_off(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    cmds.checkBox("cd_dn_false" + str(index), e = True, v = 0)
    cmds.setAttr(dsnNode + ".not[" + str(index) + "]", 0)
    newText = getIdString(index) + " "
    cmds.text("t_dn_id" + str(index), e = True, l = newText)
    upDataParseDecisionString()
    
def cb_dns_infMin_on(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    cmds.checkBox("cd_dn_infMin" + str(index), e = True, v = 1)
    cmds.setAttr(dsnNode + ".inputInfinityMin[" + str(index) + "]", 1)
    McdRefreshDecisionEditor()

def cb_dns_infMin_off(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    cmds.checkBox("cd_dn_infMin" + str(index), e = True, v = 0)
    cmds.setAttr(dsnNode + ".inputInfinityMin[" + str(index) + "]", 0)
    McdRefreshDecisionEditor()
    
def cb_dns_infMax_on(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    cmds.checkBox("cd_dn_infMax" + str(index), e = True, v = 1)
    cmds.setAttr(dsnNode + ".inputInfinityMax[" + str(index) + "]", 1)
    McdRefreshDecisionEditor()
    
def cb_dns_infMax_off(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    cmds.checkBox("cd_dn_infMax" + str(index), e = True, v = 0)
    cmds.setAttr(dsnNode + ".inputInfinityMax[" + str(index) + "]", 0)
    McdRefreshDecisionEditor()

    
# input
def tf_dns_inputCC(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    value = cmds.textField("if_dn_input" + str(index), q = True, tx = True)
    cmds.setAttr(dsnNode + ".input[" + str(index) + "]", value, type = "string")


# input
def tf_dns_inputCCLgg(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    qValue = cmds.textField("if_dn_inputLgg" + str(index), q = True, tx = True)
    value = qValue
    
    
    # fixing the formation:
    try:
        keypose = value.find(">");
        if keypose >=0:
            if value[keypose + 1] != " ":
                value = McdInserString(keypose, " ", value)
            keypose = value.find(">");
            if value[keypose - 1] != " ":
                value = McdInserString(keypose-1, " ", value)
    except:
        pass
    try:
        keypose = value.find("<");
        if keypose >=0:
            if value[keypose + 1] != " ":
                value = McdInserString(keypose, " ", value)
            keypose = value.find("<");
            if value[keypose - 1] != " ":
                value = McdInserString(keypose-1, " ", value)
    except:
        pass
    
    try:
        keypose = value.find("~");
        if keypose >=0:
            if value[keypose + 1] != " ":
                value = McdInserString(keypose, " ", value)
            keypose = value.find("~");
            if value[keypose - 1] != " ":
                value = McdInserString(keypose-1, " ", value)
    except:
        pass
    
    if value.find("to") > 0 and value.find("from") > 0:
        try:
            keypose = value.rfind("to");
            if keypose >=0:
                if value[keypose + 2] != " ":
                    value = McdInserString(keypose+1, " ", value)
                keypose = value.rfind("to");
                if value[keypose - 1] != " ":
                    value = McdInserString(keypose-1, " ", value)
        except:
            pass
        try:
            keypose = value.rfind("from");
            if keypose >=0:
                if value[keypose + 4] != " ":
                    value = McdInserString(keypose+3, " ", value)
                keypose = value.rfind("from");
                if value[keypose - 1] != " ":
                    value = McdInserString(keypose-1, " ", value)
        except:
            pass
    
    
    try:
        keypose = value.find("=");
        if keypose >=0:
            if value[keypose + 1] != " ":
                value = McdInserString(keypose, " ", value)
            keypose = value.find("=");
            if value[keypose - 1] != " ":
                value = McdInserString(keypose-1, " ", value)
    except:
        pass
    
    
    if value != qValue:
        cmds.textField("if_dn_inputLgg" + str(index), e = True, tx = value)
    
    cmds.setAttr(dsnNode + ".inputLanguage[" + str(index) + "]", value, type = "string")
    
    McdParseLanguageFirstTime(value, dsnNode, index)
    
    
# input
def tf_dn_outLggCC(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    qValue = cmds.textField("tf_dn_outLgg" + str(index), q = True, tx = True)
    
    cmds.setAttr(dsnNode + ".outputLanguage[" + str(index) + "]", qValue, type = "string")
    McdParseOutLanguageFirstTime(qValue, dsnNode, index)
    
# value min
def ff_inputVMinCC(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    value = cmds.floatField("if_dn_min" + str(index), q = True, v = True)
    cmds.setAttr(dsnNode + ".inputValueMin[" + str(index) + "]", value)
    updatePSRNodeDataWrapper(index, dsnNode)
    
# value max
def ff_inputVMaxCC(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    value = cmds.floatField("if_dn_max" + str(index), q = True, v = True)
    cmds.setAttr(dsnNode + ".inputValueMax[" + str(index) + "]", value)
    updatePSRNodeDataWrapper(index, dsnNode)
    
# fuzzy low bound:
def ff_inputFVMinCC(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    value = cmds.floatField("if_dn_fzmin" + str(index), q = True, v = True)
    cmds.setAttr(dsnNode + ".fuzzyIn[" + str(index) + "]", value)
    updatePSRNodeDataWrapper(index, dsnNode)
    
def ff_inputFVMinCC2(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    value = cmds.floatField("if_dn_fzmin" + str(index), q = True, v = True)
    cmds.setAttr(dsnNode + ".fuzzyIn[" + str(index) + "]", value)
    
    cmds.floatField("if_dn_fzmax" + str(index), e = True, v = value)
    cmds.setAttr(dsnNode + ".fuzzyOut[" + str(index) + "]", value)
    updatePSRNodeDataWrapper(index, dsnNode)
    
def ff_inputFVMaxCC(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    value = cmds.floatField("if_dn_fzmax" + str(index), q = True, v = True)
    cmds.setAttr(dsnNode + ".fuzzyOut[" + str(index) + "]", value)
    updatePSRNodeDataWrapper(index, dsnNode)
    
#---------------------------------------------------------------------
# output
def tf_dn_outCC(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    value = cmds.textField("tf_dn_out" + str(index), q = True, tx = True)
    #if cmds.getAttr(dsnNode + ".default") == 1:
    #    if (value.find("dynamics.active")>=0):
    #        cmds.confirmDialog(t = "Warning", m = "Please do not fill dynamic active channel in default decision.\nAuto erase for you.")
    #        cmds.textField("tf_dn_out" + str(index), e = True, tx = "")
    #        cmds.setAttr(dsnNode + ".output[" + str(index) + "]", "", type = "string")
    #        return;
    
    cmds.setAttr(dsnNode + ".output[" + str(index) + "]", value, type = "string")
    
    
def ff_dn_ovCC(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    value = cmds.floatField("ff_dn_ov" + str(index), q = True, v = True)
    cmds.setAttr(dsnNode + ".outputValue[" + str(index) + "]", value)

def ff_dn_esCC(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    value = cmds.floatField("ff_dn_else" + str(index), q = True, v = True)
    cmds.setAttr(dsnNode + ".outputElse[" + str(index) + "]", value)
    
def om_dn_outFilter(index):
    dsnNode = McdDecisionGetNodeNameFromGUI()
    value = cmds.intField("ff_dn_frt" + str(index), q = True, v = True)
    cmds.setAttr(dsnNode + ".outputFilter[" + str(index) + "]", value)


# output type
def setupOmDecisionOutType(dType, stri):
    cmds.menuItem(label = "Value")
    cmds.menuItem(label = "Change Rate")
    # 0: value
    # 1: change rate
    valueL = "Value"
    if dType == 1:
        valueL = "Change Rate"
    cmds.optionMenu("om_dn_otype" + stri, e = True, v = valueL)
    
def om_dn_outType(index):
    # 0: value
    # 1: change rate
    value = cmds.optionMenu("om_dn_otype" + str(index), q = True, v = True)
    dType = 0
    newValue = "Value"
    if value == "Change Rate":
        dType = 1
        newValue = "Change Rate"
    dsnNode = McdDecisionGetNodeNameFromGUI()
    cmds.setAttr(dsnNode + ".outputType[" + str(index) + "]", dType)
    cmds.optionMenu("om_dn_otype" + str(index), e = True, v = newValue)
    
    
def setupOmDecisionDfzType(dType, stri):
    cmds.menuItem(label = "Average")
    cmds.menuItem(label = "Max")
    cmds.menuItem(label = "Blend")
    # 0: value
    # 1: change rate
    valueL = "Average"
    if dType == 1:
        valueL = "Max"
    elif dType == 2:
        valueL = "Blend"
    cmds.optionMenu("om_dn_dfztype" + stri, e = True, v = valueL)
    
def om_dn_dfzType(index):
    # 0: value
    # 1: change rate
    value = cmds.optionMenu("om_dn_dfztype" + str(index), q = True, v = True)
    dType = 0
    newValue = "Average"
    if value == "Max":
        dType = 1
        newValue = "Max"
    elif value == "Blend":
        dType = 2
        newValue = "Blend"
    dsnNode = McdDecisionGetNodeNameFromGUI()
    cmds.setAttr(dsnNode + ".defuzzType[" + str(index) + "]", dType)
    cmds.optionMenu("om_dn_dfztype" + str(index), e = True, v = newValue)
    
    
def upDataParseDecisionString():
    inputResult = mel.eval("McdParseDecisionCmd;")
    cmds.textField("parseResult", e = True, tx = inputResult)
    
    
def decisionNotesChange(dcNode):
    try:
        dNotes = cmds.textField("DecisionComments", q = True, tx = True)
        cmds.setAttr(dcNode + ".comment", dNotes, type = "string")
    except:
        try:
            cmds.addAttr(dcNode, ln = "comment", dt = "string")
            dNotes = cmds.textField("DecisionComments", q = True, tx = True)
            cmds.setAttr(dcNode + ".comment", dNotes, type = "string")
        except:
            pass
        
        
def moveUpSentence(index, dcNode, isUpdate = 0):
    #priority, logic, not, input, inputValueMin, inputValueMax, fuzzyIn, fuzzyOut
    indexUp = index - 1
    stri = str(index)
    striUp = str(indexUp)
    
    # fetch current
    dPriority = cmds.getAttr(dcNode + ".priority[" +stri+ "]")
    dLogic = cmds.getAttr(dcNode + ".logic[" +stri+ "]")
    dNot = cmds.getAttr(dcNode + ".not[" +stri+ "]")
    dInput = cmds.getAttr(dcNode + ".input[" +stri+ "]")
    dInLgg = cmds.getAttr(dcNode + ".inLgg[" +stri+ "]")
    dMin = cmds.getAttr(dcNode + ".inputValueMin[" +stri+ "]")
    dMinInf = cmds.getAttr(dcNode + ".inputInfinityMin[" + stri + "]")
    dMax = cmds.getAttr(dcNode + ".inputValueMax[" +stri+ "]")
    dMaxInf = cmds.getAttr(dcNode + ".inputInfinityMax[" + stri + "]")
    dFuzzyIn = cmds.getAttr(dcNode + ".fuzzyIn[" +stri+ "]")
    dFuzzyOut = cmds.getAttr(dcNode + ".fuzzyOut[" +stri+ "]")
    dInputType = cmds.getAttr(dcNode + ".inputType[" +stri+ "]")
    
    # fetch up
    dPriorityUp = cmds.getAttr(dcNode + ".priority[" +striUp+ "]")
    dLogicUp = cmds.getAttr(dcNode + ".logic[" +striUp+ "]")
    dNotUp = cmds.getAttr(dcNode + ".not[" +striUp+ "]")
    dInputUp = cmds.getAttr(dcNode + ".input[" +striUp+ "]")
    dInLggUp = cmds.getAttr(dcNode + ".inLgg[" +striUp+ "]")
    dMinUp = cmds.getAttr(dcNode + ".inputValueMin[" +striUp+ "]")
    dMinInfUp = cmds.getAttr(dcNode + ".inputInfinityMin[" + striUp + "]")
    dMaxUp = cmds.getAttr(dcNode + ".inputValueMax[" +striUp+ "]")
    dMaxInfUp = cmds.getAttr(dcNode + ".inputInfinityMax[" + striUp + "]")
    dFuzzyInUp = cmds.getAttr(dcNode + ".fuzzyIn[" +striUp+ "]")
    dFuzzyOutUp = cmds.getAttr(dcNode + ".fuzzyOut[" +striUp+ "]")
    dInputTypeUp = cmds.getAttr(dcNode + ".inputType[" +striUp+ "]")
    
    # set up: current!
    cmds.setAttr(dcNode + ".priority[" +stri+ "]", dPriorityUp)
    cmds.setAttr(dcNode + ".logic[" +stri+ "]", dLogicUp)
    cmds.setAttr(dcNode + ".inTyp[" +stri+ "]", dInputTypeUp)
    cmds.setAttr(dcNode + ".not[" +stri+ "]", dNotUp)
    if dInputUp == None:
        cmds.setAttr(dcNode + ".input[" +stri+ "]", "" , type = "string")
    else:
        cmds.setAttr(dcNode + ".input[" +stri+ "]", dInputUp , type = "string")
    if dInLgg == None:
        cmds.setAttr(dcNode + ".inLgg[" +stri+ "]", "" , type = "string")
    else:
        cmds.setAttr(dcNode + ".inLgg[" +stri+ "]", dInLggUp , type = "string")
        
    cmds.setAttr(dcNode + ".inputValueMin[" +stri+ "]", dMinUp)
    cmds.setAttr(dcNode + ".inputValueMax[" +stri+ "]", dMaxUp)
    cmds.setAttr(dcNode + ".inputInfinityMin[" +stri+ "]", dMinInfUp)
    cmds.setAttr(dcNode + ".inputInfinityMax[" +stri+ "]", dMaxInfUp)
    cmds.setAttr(dcNode + ".fuzzyIn[" +stri+ "]", dFuzzyInUp)
    cmds.setAttr(dcNode + ".fuzzyOut[" +stri+ "]", dFuzzyOutUp)
    
    # set up: up!
    cmds.setAttr(dcNode + ".priority[" +striUp+ "]", dPriority)
    cmds.setAttr(dcNode + ".logic[" +striUp+ "]", dLogic)
    cmds.setAttr(dcNode + ".inTyp[" +striUp+ "]", dInputType)
    cmds.setAttr(dcNode + ".not[" +striUp+ "]", dNot)
    if dInput == None:
        cmds.setAttr(dcNode + ".input[" +striUp+ "]", "", type = "string")
    else:
        cmds.setAttr(dcNode + ".input[" +striUp+ "]", dInput, type = "string")
    if dInLgg == None:
        cmds.setAttr(dcNode + ".inLgg[" +striUp+ "]", "", type = "string")
    else:
        cmds.setAttr(dcNode + ".inLgg[" +striUp+ "]", dInLgg, type = "string")
    cmds.setAttr(dcNode + ".inputValueMin[" +striUp+ "]", dMin)
    cmds.setAttr(dcNode + ".inputValueMax[" +striUp+ "]", dMax)
    cmds.setAttr(dcNode + ".inputInfinityMin[" +striUp+ "]", dMinInf)
    cmds.setAttr(dcNode + ".inputInfinityMax[" +striUp+ "]", dMaxInf)
    cmds.setAttr(dcNode + ".fuzzyIn[" +striUp+ "]", dFuzzyIn)
    cmds.setAttr(dcNode + ".fuzzyOut[" +striUp+ "]", dFuzzyOut)

    # check connection
    allConns = cmds.listConnections(dcNode + ".active["+ stri +"]", d = True, s = False)
    psrNode = ""
    if MIsBlank(allConns):
        # if not create and connect
        psrNode = cmds.createNode("polySplitRing", ss = True)
        cmds.connectAttr(dcNode + ".active["+ stri +"]", psrNode + ".worldSpace")
    else:
        psrNode = allConns[0]
        
    allConns = cmds.listConnections(dcNode + ".active["+ striUp +"]", d = True, s = False)
    psrNodeUp = ""
    if MIsBlank(allConns):
        # if not create and connect
        psrNodeUp = cmds.createNode("polySplitRing", ss = True)
        cmds.connectAttr(dcNode + ".active["+ striUp +"]", psrNodeUp + ".worldSpace")
    else:
        psrNodeUp = allConns[0]
        
    cmds.disconnectAttr(dcNode + ".active["+ stri +"]", psrNode + ".worldSpace")
    cmds.disconnectAttr(dcNode + ".active["+ striUp +"]", psrNodeUp + ".worldSpace")
    cmds.connectAttr(dcNode + ".active["+ stri +"]", psrNodeUp + ".worldSpace")
    cmds.connectAttr(dcNode + ".active["+ striUp +"]", psrNode + ".worldSpace")
    
    
    if isUpdate == 1:
        McdRefreshDecisionEditor()


def deleteSentence(index, dcNode):
    stat = cmds.confirmDialog(t = "Note", m = "Are your sure to delete this sentence?", b = ["Delete", "Cancel"])
    if stat == "Delete":
        # if next available, move next sentence up
        dActive = cmds.getAttr(dcNode + ".active[" +str(index+1)+ "]")
        escape = 50;
        while(dActive == 1 and escape > 0):
            # move up:
            moveUpSentence(index+1, dcNode)
            index += 1;
            dActive = cmds.getAttr(dcNode + ".active[" +str(index+1)+ "]")
            escape -= 1;
        
        #deactivate index
        cmds.setAttr(dcNode + ".active[" +str(index)+ "]", 0)
        McdRefreshDecisionEditor()
    
def MakeDecisionNonDefault(dcNode):
    globalNode = McdGetMcdGlobalNode()
    allDcNodes = cmds.ls(type = "McdDecision", l = True)
    allActiveNodes = []
    for i in range(len(allDcNodes)):
        cmds.setAttr(globalNode + ".nextAgentType", allDcNodes[i], type = "string")
        isAct = mel.eval("McdCheckNodeActiveCmd;")
        if isAct == 1:
            allActiveNodes.append(allDcNodes[i])
    
    for i in range(len(allActiveNodes)):
        cmds.setAttr(allActiveNodes[i] + ".default", 0)
        
    cmds.select(dcNode)
        
    
def MakeDecisionDefault(dcNode):
    globalNode = McdGetMcdGlobalNode()
    allDcNodes = cmds.ls(type = "McdDecision", long = True)
    allActiveNodes = []
    for i in range(len(allDcNodes)):
        cmds.setAttr(globalNode + ".nextAgentType", allDcNodes[i], type = "string")
        isAct = mel.eval("McdCheckNodeActiveCmd;")
        if isAct == 1:
            allActiveNodes.append(allDcNodes[i])
    
    for i in range(len(allActiveNodes)):
        cmds.setAttr(allActiveNodes[i] + ".default", 0)
        
    cmds.setAttr(dcNode + ".default", 1)
    
    #dynIndexList = []
    #counter = 0;
    #while (cmds.getAttr(dcNode + ".outAtv[" + str(counter) + "]") == 1):
    #    outVal = cmds.getAttr(dcNode + ".output[" + str(counter) + "]")
    #    if outVal != None:        
    #        if outVal.find("dynamics.active")>=0:
    #            dynIndexList.append(counter)
    #    counter += 1;
    #    
    #if dynIndexList != []:
    #    cmds.confirmDialog(t = "Warning", m = "Please do not fill dynamic active channel in default decision.\nAuto erase for you.")
    #    
    #    for i in range(len(dynIndexList)):
    #        cmds.setAttr(dcNode + ".output[" + str(dynIndexList[i]) + "]", "", type = "string")
    
    cmds.select(dcNode)
    
def editDefaultAction(dcNode):
    newDefaultActionName = cmds.textField("TF_defaultAction", q = True, tx = True)
    cmds.setAttr( dcNode + ".defaultAction", newDefaultActionName, type = "string")


def autoFillSentence(i, dcNode):
    McdSentencePresetListGUI(i, dcNode)

def autoFillDecision(i, dcNode):
    McdDecisionPresetListGUI(i, dcNode)

def checkAndGetPolySplitRing(i, dcNode):
    stri = str(i)
    # check connection
    allConns = cmds.listConnections(dcNode + ".active["+ stri +"]", d = True, s = False)
    psrNode = ""
    if MIsBlank(allConns):
        # if not create and connect
        psrNode = cmds.createNode("polySplitRing", ss = True)
        cmds.connectAttr(dcNode + ".active["+ stri +"]", psrNode + ".worldSpace")
    else:
        psrNode = allConns[0]

            
    return psrNode


def updatePSRNodeData(i, dcNode, dInfMin, dInfMax, dMin, dMax, dFuzzyIn, dFuzzyOut, psrNode):
    stri = str(i)
    floatFieldData = []
    floatFieldData.append(0.0)
    floatFieldData.append(0.0)
    floatFieldData.append(0.0)
    floatFieldData.append(0.0)
    
    if dFuzzyIn < 0.01:
        dFuzzyIn = 0.001
    if dFuzzyOut < 0.01:
        dFuzzyOut = 0.001
    
    
    isAbsMode = False
    try:
        if cmds.getAttr(dcNode + ".absMode") == 1:
            isAbsMode = True
    except:
        pass
    
    if isAbsMode:
        # re order the values:
        dMin = (dMin + (dMin - dFuzzyIn)) * 0.5
        dMax = (dMax + (dMax + dFuzzyOut)) * 0.5
        dFuzzyIn *= 0.5
        dFuzzyOut *= 0.5
    
    
    if psrNode == "None":
        # check connection
        allConns = cmds.listConnections(dcNode + ".active["+ stri +"]", d = True, s = False)
        psrNode = ""
        if MIsBlank(allConns):
            # if not create and connect
            psrNode = cmds.createNode("polySplitRing", ss = True)
            cmds.connectAttr(dcNode + ".active["+ stri +"]", psrNode + ".worldSpace")
                
        else:
            psrNode = allConns[0]
            
    # solve bounding:
    boundMin = 0.0
    boundMax = 0.0
    
    bothRange = False
    middleValue = 0
    
    if dInfMin == 1 and dInfMax == 0:
        boundMax = dMax + dFuzzyOut
        boundMin = dMax - dFuzzyOut
    elif dInfMin == 0 and dInfMax == 1:
        boundMin = dMin - dFuzzyIn
        boundMax = dMin + dFuzzyIn
    else:
        if dMin > dMax:
            dTemp = dMin
            dMin = dMax
            dMax = dTemp
            dTemp = dFuzzyIn
            dFuzzyIn = dFuzzyOut
            dFuzzyOut = dTemp
            
        bothRange = True
        
        part1 = dMin + dFuzzyIn
        part2 = dMax - dFuzzyOut
        if part1 > dMax:
            part1 = dMax
        if part2 < dMin:
            part2 = dMin
            
        middleValue = (part1 + part2) * 0.5
            
        boundMin = dMin - dFuzzyIn
        boundMax = dMax + dFuzzyOut
        
        
    totalBoundOrg = boundMax - boundMin
    
    absMin = abs(dMin)
    absMax = abs(dMax)
    if absMin == absMax:
        decr = 5 + totalBoundOrg * 0.2
        incr = 5 + totalBoundOrg * 0.2
    elif absMin > absMax:
        decr = 5 + totalBoundOrg * 0.4
        incr = 5 + totalBoundOrg * 0.1
    else:
        decr = 5 + totalBoundOrg * 0.1
        incr = 5 + totalBoundOrg * 0.4
        
    boundMin -= decr
    boundMax += incr
            
    totalBound = boundMax - boundMin
    
    # if init, ignore it!
    if abs(dMin) < 0.01 and abs(dMax) < 0.01 and abs(dFuzzyIn) < 0.01 and abs(dFuzzyOut) < 0.01:
        return floatFieldData
    
    if totalBound > 0.01:
        pos1 = (dMin - dFuzzyIn - boundMin) / totalBound
        pos2 = (dMin + dFuzzyIn - boundMin) / totalBound
        pos3 = (dMax - dFuzzyOut - boundMin) / totalBound
        pos4 = (dMax + dFuzzyOut - boundMin) / totalBound
        val1 = dMin - dFuzzyIn
        val2 = dMin + dFuzzyIn
        val3 = dMax - dFuzzyOut
        val4 = dMax + dFuzzyOut
        
        
        if bothRange:
            middleValueOrg = middleValue
            middleValue -= boundMin
            middleLimit = middleValue / totalBound
            if pos2 > middleLimit:
                pos2 = middleLimit
                val2 = middleValueOrg
            if pos3 < middleLimit:
                pos3 = middleLimit
                val3 = middleValueOrg
        
        floatFieldData[0] = val1
        floatFieldData[1] = val2
        floatFieldData[2] = val3
        floatFieldData[3] = val4
        

        try:
            cmds.floatField("gfpos1" + stri, e = True, v = val1) # graphic
            cmds.floatField("gfpos2" + stri, e = True, v = val2) # graphic
        except:
            pass
        try:
            cmds.floatField("gfpos3" + stri, e = True, v = val3) # graphic
            cmds.floatField("gfpos4" + stri, e = True, v = val4) # graphic
        except:
            pass
        
        if dInfMin == 1:
            cmds.setAttr( psrNode + ".profileCurve[0].profileCurve_Interp", 1)
            cmds.setAttr( psrNode + ".profileCurve[0].profileCurve_Position", 0)
            cmds.setAttr( psrNode + ".profileCurve[0].profileCurve_FloatValue", 1.0)
    
            cmds.setAttr( psrNode + ".profileCurve[1].profileCurve_Interp", 1)
            cmds.setAttr( psrNode + ".profileCurve[1].profileCurve_Position", 0.03)
            cmds.setAttr( psrNode + ".profileCurve[1].profileCurve_FloatValue", 1.0)
        else:
            cmds.setAttr( psrNode + ".profileCurve[0].profileCurve_Interp", 1)
            cmds.setAttr( psrNode + ".profileCurve[0].profileCurve_Position", pos1)
            cmds.setAttr( psrNode + ".profileCurve[0].profileCurve_FloatValue", 0.0)
    
            cmds.setAttr( psrNode + ".profileCurve[1].profileCurve_Interp", 1)
            cmds.setAttr( psrNode + ".profileCurve[1].profileCurve_Position", pos2)
            cmds.setAttr( psrNode + ".profileCurve[1].profileCurve_FloatValue", 1.0)
    
        if dInfMax == 1:
            cmds.setAttr( psrNode + ".profileCurve[2].profileCurve_Interp", 1)
            cmds.setAttr( psrNode + ".profileCurve[2].profileCurve_Position", 0.97)
            cmds.setAttr( psrNode + ".profileCurve[2].profileCurve_FloatValue", 1.0)
    
            cmds.setAttr( psrNode + ".profileCurve[3].profileCurve_Interp", 1)
            cmds.setAttr( psrNode + ".profileCurve[3].profileCurve_Position", 1.0)
            cmds.setAttr( psrNode + ".profileCurve[3].profileCurve_FloatValue", 1.0)
        else:
            cmds.setAttr( psrNode + ".profileCurve[2].profileCurve_Interp", 1)
            cmds.setAttr( psrNode + ".profileCurve[2].profileCurve_Position", pos3)
            cmds.setAttr( psrNode + ".profileCurve[2].profileCurve_FloatValue", 1.0)
    
            cmds.setAttr( psrNode + ".profileCurve[3].profileCurve_Interp", 1)
            cmds.setAttr( psrNode + ".profileCurve[3].profileCurve_Position", pos4)
            cmds.setAttr( psrNode + ".profileCurve[3].profileCurve_FloatValue", 0.0)
            
            
    return floatFieldData


def updatePSRNodeDataWrapper(i, dcNode):
    
    stri = str(i)
    # check connection
    allConns = cmds.listConnections(dcNode + ".active["+ stri +"]", d = True, s = False)
    psrNode = ""
    if MIsBlank(allConns):
        # if not create and connect
        psrNode = cmds.createNode("polySplitRing", ss = True)
        cmds.connectAttr(dcNode + ".active["+ stri +"]", psrNode + ".worldSpace")
    else:
        psrNode = allConns[0]
        
    dMin = cmds.getAttr(dcNode + ".inputValueMin[" +stri+ "]")
    dInfMin = cmds.getAttr(dcNode + ".inputInfinityMin[" +stri+ "]")
    dMax = cmds.getAttr(dcNode + ".inputValueMax[" +stri+ "]")
    dInfMax = cmds.getAttr(dcNode + ".inputInfinityMax[" +stri+ "]")
    dFuzzyIn = cmds.getAttr(dcNode + ".fuzzyIn[" +stri+ "]")
    dFuzzyOut = cmds.getAttr(dcNode + ".fuzzyOut[" +stri+ "]")


    updatePSRNodeData(i, dcNode, dInfMin, dInfMax, dMin, dMax, dFuzzyIn, dFuzzyOut, psrNode)


def eeq(input1, input2):
    if input1 == input2:
        return 1
    else:
        return 0
    
def ffd(input1, input2):
    if input1.find(input2) >= 0:
        return 1
    else:
        return 0
    
def McdMenuFillSentence(lgg, sentenceID, dcNode):
    sid = str(sentenceID)
    
    cmds.setAttr(dcNode + ".inputLanguage[" + sid + "]", lgg, type = "string")
    cmds.textField("if_dn_inputLgg" + str(sentenceID), e = True, tx = lgg)
    
    McdParseLanguageFirstTime(lgg, dcNode, sentenceID)
    
def McdAddMenuItem(lgg, index, dcNode, enb = True):
    if lgg.find("---") > 0:
        return
    
    cmds.menuItem(label = lgg, c = "McdMenuFillSentence(\"" + lgg + "\", " + str(index) + ", \""+dcNode+"\")", enable = enb )
    
def McdLanguageMenu(index, dcNode, control):
    
    cmds.popupMenu()
    

    cmds.menuItem(label = "Sphere Range", subMenu = True)
    McdAddMenuItem("someone in my sphere with angle from ?? to ??", index, dcNode)
    McdAddMenuItem("someone in my sphere with distance < ??", index, dcNode)
    McdAddMenuItem("someone in my sphere with up-down angle from ?? to ??", index, dcNode)
    McdAddMenuItem("someone in my sphere and his sphere color id = ??", index, dcNode)
    McdAddMenuItem("color id of my sphere = ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("someone in my sphere aim to angle from ?? to ??", index, dcNode)
    McdAddMenuItem("someone in my sphere aim to up-down angle from ?? to ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("someone in my sphere with relative speedX < ??", index, dcNode)
    McdAddMenuItem("someone in my sphere with relative speedY > ??", index, dcNode)
    McdAddMenuItem("someone in my sphere with relative speedZ from ?? to ??", index, dcNode)
    McdAddMenuItem("---", index, dcNode)
    McdAddMenuItem("someone in my sphere with relative speed > ??", index, dcNode)
    cmds.setParent("..", menu = True)
    


    cmds.menuItem(label = "Frustum Range", subMenu = True)
    McdAddMenuItem("someone in my frustum with angle from ?? to ??", index, dcNode)
    McdAddMenuItem("someone in my frustum with distance < ??", index, dcNode)
    McdAddMenuItem("someone in my frustum with up-down angle from ?? to ??", index, dcNode)
    McdAddMenuItem("someone in my frustum and his color id = ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Road", subMenu = True)
    McdAddMenuItem("I'm on road and it point to LEFT", index, dcNode)
    McdAddMenuItem("I'm on road and it point to RIGHT", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("I'm on road[??] and it point to LEFT", index, dcNode)
    McdAddMenuItem("I'm on road[??] and it point to RIGHT", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("inverse direction, I'm on road and it point to LEFT", index, dcNode)
    McdAddMenuItem("inverse direction, I'm on road and it point to RIGHT", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("inverse direction, I'm on road[??] and it point to LEFT", index, dcNode)
    McdAddMenuItem("inverse direction, I'm on road[??] and it point to RIGHT", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("I'm on road and my position from ?? to ??", index, dcNode)
    McdAddMenuItem("I'm on road[??] and my position from ?? to ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Path", subMenu = True)
    McdAddMenuItem("I'm in path and it point to LEFT", index, dcNode)
    McdAddMenuItem("I'm in path and it point to RIGHT", index, dcNode)
    McdAddMenuItem("I'm in path and it point to UP", index, dcNode)
    McdAddMenuItem("I'm in path and it point to DOWN", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("I'm in path[??] and it point to LEFT", index, dcNode)
    McdAddMenuItem("I'm in path[??] and it point to RIGHT", index, dcNode)
    McdAddMenuItem("I'm in path[??] and it point to UP", index, dcNode)
    McdAddMenuItem("I'm in path[??] and it point to DOWN", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Body Leveling", sm = True)
    McdAddMenuItem("I lean to LEFT", index, dcNode)
    McdAddMenuItem("I lean to RIGHT", index, dcNode)
    McdAddMenuItem("I lean UP", index, dcNode)
    McdAddMenuItem("I lean DOWN", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Terrain", sm = True)
    McdAddMenuItem("I'm higher than terrain distance > 0", index, dcNode)
    McdAddMenuItem("I'm higher than terrain distance < 0", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("higher terrain on LEFT", index, dcNode)
    McdAddMenuItem("higher terrain on RIGHT", index, dcNode)
    McdAddMenuItem("I'm on terrain UPHILL", index, dcNode)
    McdAddMenuItem("I'm on terrain DOWNHILL", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("the color intensity of my position < ??", index, dcNode)
    McdAddMenuItem("the color intensity of my position from ?? to ??", index, dcNode)
    McdAddMenuItem("more darker on LEFT", index, dcNode)
    McdAddMenuItem("more darker on RIGHT", index, dcNode)
    McdAddMenuItem("more darker in FRONT", index, dcNode)
    McdAddMenuItem("more darker in BACK", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Maya Geometry Point", sm = True)
    McdAddMenuItem("a rand point on mesh:??? on LEFT", index, dcNode)
    McdAddMenuItem("a rand point on mesh:??? on RIGHT", index, dcNode)
    McdAddMenuItem("a rand point on mesh:??? is UP", index, dcNode)
    McdAddMenuItem("a rand point on mesh:??? is DOWN", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("a rand point on mesh:??? to distance < ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Maya Geometry", sm = True)
    McdAddMenuItem("I'm higher than geometry:??? distance > 0", index, dcNode)
    McdAddMenuItem("I'm higher than geometry:??? distance < 0", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("higher geometry:??? on LEFT", index, dcNode)
    McdAddMenuItem("higher geometry:??? on RIGHT", index, dcNode)
    McdAddMenuItem("I'm on geometry:??? UPHILL", index, dcNode)
    McdAddMenuItem("I'm on geometry:??? DOWNHILL", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Speed", sm = True)
    McdAddMenuItem("my world speed > ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("my velocity of translation in X > ??", index, dcNode)
    McdAddMenuItem("my velocity of translation in Y > ??", index, dcNode)
    McdAddMenuItem("my velocity of translation in Z > ??", index, dcNode)
    McdAddMenuItem("my velocity of rotation in X > ??", index, dcNode)
    McdAddMenuItem("my velocity of rotation in Y > ??", index, dcNode)
    McdAddMenuItem("my velocity of rotation in Z > ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("my velocity of translation in Z > from ?? to ??", index, dcNode)
    McdAddMenuItem("my velocity of rotation in Y  from ?? to ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Bound", sm = True)
    McdAddMenuItem("I'm in bound", index, dcNode)
    McdAddMenuItem("I'm in bound[??]", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Spot", sm = True)
    McdAddMenuItem("spot is on LEFT", index, dcNode)
    McdAddMenuItem("spot is on RIGHT", index, dcNode)
    McdAddMenuItem("spot is UP", index, dcNode)
    McdAddMenuItem("spot is DOWN", index, dcNode)
    McdAddMenuItem("spot to me distance < ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("spot is on from ?? to ??", index, dcNode)
    McdAddMenuItem("spot is from ?? to ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("spot[??] is on LEFT", index, dcNode)
    McdAddMenuItem("spot[??] is on RIGHT", index, dcNode)
    McdAddMenuItem("spot[??] is UP", index, dcNode)
    McdAddMenuItem("spot[??] is DOWN", index, dcNode)
    McdAddMenuItem("spot[??] to me distance < ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("spot[??] is on from ?? to ??", index, dcNode)
    McdAddMenuItem("spot[??] is from ?? to ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Zone", sm = True)
    McdAddMenuItem("zone is on LEFT", index, dcNode)
    McdAddMenuItem("zone is on RIGHT", index, dcNode)
    McdAddMenuItem("zone is on from ?? to ??", index, dcNode)
    McdAddMenuItem("zone is UP", index, dcNode)
    McdAddMenuItem("zone is DOWN", index, dcNode)
    McdAddMenuItem("zone to me 2D distance < ??", index, dcNode)
    McdAddMenuItem("zone to me 3D distance < ??", index, dcNode)
    McdAddMenuItem("I'm higher than zone distance > 0", index, dcNode)
    McdAddMenuItem("I'm in area of zone", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("zone[??] is on LEFT", index, dcNode)
    McdAddMenuItem("zone[??] is on RIGHT", index, dcNode)
    McdAddMenuItem("zone[??] is on from ?? to ??", index, dcNode)
    McdAddMenuItem("zone[??] is UP", index, dcNode)
    McdAddMenuItem("zone[??] is DOWN", index, dcNode)
    McdAddMenuItem("zone[??] to me 2D distance < ??", index, dcNode)
    McdAddMenuItem("zone[??] to me 3D distance < ??", index, dcNode)
    McdAddMenuItem("I'm higher than zone[??] distance < ??", index, dcNode)
    McdAddMenuItem("I'm in area of zone[??]", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Master", sm = True)
    McdAddMenuItem("my master is on LEFT", index, dcNode)
    McdAddMenuItem("my master is on RIGHT", index, dcNode)
    McdAddMenuItem("my master is UP", index, dcNode)
    McdAddMenuItem("my master is DOWN", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("my master to me distance > ??", index, dcNode)
    McdAddMenuItem("my master to me distance < ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Formation", sm = True)
    McdAddMenuItem("formation target point is on LEFT", index, dcNode)
    McdAddMenuItem("formation target point is on RIGHT", index, dcNode)
    McdAddMenuItem("formation target point is UP", index, dcNode)
    McdAddMenuItem("formation target point is DOWN", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("formation target point to me distance > ??", index, dcNode)
    McdAddMenuItem("formation target point to me distance < ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("formation target point is on from ?? to ??", index, dcNode)
    McdAddMenuItem("formation target point is from ?? to ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Placer Formation", sm = True)
    McdAddMenuItem("placer target is on LEFT", index, dcNode)
    McdAddMenuItem("placer target is on RIGHT", index, dcNode)
    #McdAddMenuItem("place target point is UP", index, dcNode)
    #McdAddMenuItem("place target point is DOWN", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("placer target to me distance > ??", index, dcNode)
    McdAddMenuItem("placer target to me distance < ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("placer target to me 2D distance > ??", index, dcNode)
    McdAddMenuItem("placer target to me 2D distance < ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("placer target orient to LEFT", index, dcNode)
    McdAddMenuItem("placer target orient to RIGHT", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Maya Particles", sm = True)
    McdAddMenuItem("X component of particle:???.??? from ?? to ??", index, dcNode)
    McdAddMenuItem("Y component of particle:???.??? from ?? to ??", index, dcNode)
    McdAddMenuItem("Z component of particle:???.??? from ?? to ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("value of particle:???.??? from ?? to ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("particle:??? point is on LEFT", index, dcNode)
    McdAddMenuItem("particle:??? point is on RIGHT", index, dcNode)
    McdAddMenuItem("particle:??? point is UP", index, dcNode)
    McdAddMenuItem("particle:??? point is DOWN", index, dcNode)
    McdAddMenuItem("particle:??? point is to me distance < ??", index, dcNode)
    cmds.setParent("..", menu = True)
    


    cmds.menuItem(label = "Maya Field", sm = True)
    McdAddMenuItem("maya field point to LEFT", index, dcNode)
    McdAddMenuItem("maya field point to RIGHT", index, dcNode)
    McdAddMenuItem("maya field point UP", index, dcNode)
    McdAddMenuItem("maya field point DOWN", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("maya field intensity > ??", index, dcNode)
    McdAddMenuItem("maya field intensity from ?? to ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Maya Fluid", sm = True)
    McdAddMenuItem("maya fluid point to LEFT", index, dcNode)
    McdAddMenuItem("maya fluid point to RIGHT", index, dcNode)
    McdAddMenuItem("maya fluid point UP", index, dcNode)
    McdAddMenuItem("maya fluid point DOWN", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("maya fluid intensity > ??", index, dcNode)
    McdAddMenuItem("maya fluid intensity from ?? to ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Python or MEL", sm = True)
    McdAddMenuItem("maya python:??? return value from ?? to ??", index, dcNode)
    McdAddMenuItem("maya python:??? return value > ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("maya mel:??? return value from ?? to ??", index, dcNode)
    McdAddMenuItem("maya mel:??? return value > ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Collision Detection", sm = True)
    McdAddMenuItem("marked bone collide", index, dcNode)
    McdAddMenuItem("marked bone:??? collide", index, dcNode)
    McdAddMenuItem("marked bone collide by:???", index, dcNode)
    McdAddMenuItem("marked bone collide by:_KINEPRIM_", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("(RI) marked bone collide", index, dcNode)
    McdAddMenuItem("(RI) marked bone:??? collide", index, dcNode)
    McdAddMenuItem("(RI) marked bone collide by:???", index, dcNode)
    McdAddMenuItem("(RI) marked bone collide by:_KINEPRIM_", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("when collide, the collide objects color id from ?? to ??", index, dcNode)
    McdAddMenuItem("when collide, the collide objects color id > ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("when collide, I'm playing action:???", index, dcNode)
    McdAddMenuItem("when collide, I'm playing action in group:???", index, dcNode)
    
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "RBD Emitter", sm = True)
    McdAddMenuItem("RBD emitter contact marked bone", index, dcNode)
    McdAddMenuItem("RBD emitter contact marked bone:???", index, dcNode)
    McdAddMenuItem("RBD emitter contact marked bone:???|??|?", index, dcNode)
    McdAddMenuItem("RBD emitter[??] contact marked bone", index, dcNode)
    McdAddMenuItem("I am in RBD bomb area", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Noise ID", sm = True)
    McdAddMenuItem("rand float based on my id from ?? to ??", index, dcNode)
    McdAddMenuItem("rand float based on my id > ??", index, dcNode)
    McdAddMenuItem("rand float based on my id 0~1", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("rand float based on my id with seed:??? from ?? to ??", index, dcNode)
    McdAddMenuItem("rand float based on my id with seed:??? > ??", index, dcNode)
    McdAddMenuItem("rand float based on my id with seed:??? 0~1", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    cmds.menuItem(label = "Periodic Sine Function", sm = True)
    McdAddMenuItem("sine function with my id return value from -1 to 1", index, dcNode)
    McdAddMenuItem("sine function freq:?? with my id return value from -1 to 1", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("sine function return value from -1 to 1", index, dcNode)
    McdAddMenuItem("sine function freq:?? return value from -1 to 1", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Periodic Time", sm = True)
    McdAddMenuItem("peroidic time generate value > ??", index, dcNode)
    McdAddMenuItem("peroidic time seed:?? generate value > ??", index, dcNode)
    McdAddMenuItem("peroidic time seed:?? freq:?? generate value > ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("peroidic time with my id generate value > ??", index, dcNode)
    McdAddMenuItem("peroidic time seed:?? with my id generate value > ??", index, dcNode)
    McdAddMenuItem("peroidic time seed:?? freq:?? with my id generate value > ??", index, dcNode)
    
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    
    McdAddMenuItem("ping pong time generate value > ??", index, dcNode)
    McdAddMenuItem("ping pong time seed:?? generate value > ??", index, dcNode)
    McdAddMenuItem("ping pong time seed:?? freq:?? generate value > ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("ping pong time with my id generate value > ??", index, dcNode)
    McdAddMenuItem("ping pong time seed:?? with my id generate value > ??", index, dcNode)
    McdAddMenuItem("ping pong time seed:?? freq:?? with my id generate value > ??", index, dcNode)
    
    cmds.setParent("..", menu = True)
    
    
    cmds.menuItem(label = "Agent ID", sm = True)
    McdAddMenuItem("my ID from ?? to ??", index, dcNode)
    McdAddMenuItem("my type ID from ?? to ??", index, dcNode)
    McdAddMenuItem("my ID in placement from ?? to ??", index, dcNode)
    McdAddMenuItem("my placement ID from ?? to ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "HP and MP", sm = True)
    McdAddMenuItem("my HP from ?? to ??", index, dcNode)
    McdAddMenuItem("my HP < ??", index, dcNode)
    McdAddMenuItem("my HP > ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("my MP from ?? to ??", index, dcNode)
    McdAddMenuItem("my MP < ??", index, dcNode)
    McdAddMenuItem("my MP > ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Maya Attributes", sm = True)
    McdAddMenuItem("pre-defined maya attribute:?? value > ??", index, dcNode)
    McdAddMenuItem("pre-defined maya attribute:?? value from ?? to ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("simulation-time maya attribute:?? value > ??", index, dcNode)
    McdAddMenuItem("simulation-time maya attribute:?? value from ?? to ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Scene Info", sm = True)
    McdAddMenuItem("current frame > ??", index, dcNode)
    McdAddMenuItem("current frame < ??", index, dcNode)
    McdAddMenuItem("current frame from ?? to ??", index, dcNode)
    McdAddMenuItem("frame since simulation start > ??", index, dcNode)
    McdAddMenuItem("frame since simulation start < ??", index, dcNode)
    McdAddMenuItem("frame since I enable dynamics > ??", index, dcNode)
    McdAddMenuItem("frame since I enable dynamics < ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Dynamics Info", sm = True)
    McdAddMenuItem("I turned on dynamics", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Transform Info", sm = True)
    McdAddMenuItem("my translate X > ??", index, dcNode)
    McdAddMenuItem("my translate X from ?? to ??", index, dcNode)
    McdAddMenuItem("my translate Y > ??", index, dcNode)
    McdAddMenuItem("my translate Y > from ?? to ??", index, dcNode)
    McdAddMenuItem("my translate Z > ??", index, dcNode)
    McdAddMenuItem("my translate Z > from ?? to ??", index, dcNode)
    
    McdAddMenuItem("my rotate X > ??", index, dcNode)
    McdAddMenuItem("my rotate X > from ?? to ??", index, dcNode)
    McdAddMenuItem("my rotate Y > ??", index, dcNode)
    McdAddMenuItem("my rotate Y > from ?? to ??", index, dcNode)
    McdAddMenuItem("my rotate Z > ??", index, dcNode)
    McdAddMenuItem("my rotate Z > from ?? to ??", index, dcNode)
    
    McdAddMenuItem("my scale > ??", index, dcNode)
    McdAddMenuItem("my scale from ?? to ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    cmds.menuItem(label = "Animation", sm = True)
    McdAddMenuItem("I'm playing action:??", index, dcNode)
    McdAddMenuItem("I'm playing action from group:??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddMenuItem("current playing action phase from 0.5 to 0.7", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    #cmds.menuItem(label = "Traffic")

    
    
def McdParseLanguageFirstTime(lgg, dcNode, index):
    
    # from language to data:
    #print "----------------"
    #print lgg
    
    isBool = False
    if lgg.find("I'm in bound") == 0 or \
                    lgg.find("I'm in area of zone") == 0 or \
                    lgg.find("when collide") >= 0 or \
                    lgg.find("in RBD bomb") >= 0 or \
                    lgg.find("turned on dynamics") >= 0 or \
                    lgg.find("I'm playing action") >= 0 or \
                    lgg.find("marked bone") >= 0:
        isBool = True
        
    if lgg.find("the collide objects color id") >= 0:
        isBool = False
    
    isInverse = False
    if lgg.find("lean to") > 0 or \
                    lgg.find("darker") > 0:
        isInverse = True
        
        
    if lgg.find("I'm in path") == 0 and (lgg.find("UP") > 0 or lgg.find("DOWN") > 0):
        isInverse = True
        
    
    if len(lgg) < 2:
        return None
    
    lggSegs = lgg.split(" ")
    if MIsBlank(lggSegs):
        return None
    
    infin = 0
    infot = 0
    inval = 0
    otval = 0
    
    maxI = len(lggSegs)
    for i in range(len(lggSegs)):
        if lggSegs[i] == "from":
            if i+1 < maxI:
                try:
                    inval = float(lggSegs[i+1])
                except:
                    pass
                    
        elif lggSegs[i] == "to":
            if i+1 < maxI:
                try:
                    otval = float(lggSegs[i+1])
                except:
                    pass
                    
        elif lggSegs[i] == "~":
            if i+1 < maxI and i-1 >= 0:
                try:
                    leftVal = float(lggSegs[i-1])
                    rightVal= float(lggSegs[i+1])
                    if leftVal < rightVal:
                        inval = (leftVal + rightVal) * 0.5
                        fuzzy = (rightVal - leftVal) * 0.5
                        infot = 1
                        cmds.floatField("if_dn_fzmin" + str(index), e = True, v = fuzzy)
                        cmds.setAttr(dcNode + ".fuzzyIn[" + str(index) + "]", fuzzy)
                    else:
                        otval = (leftVal + rightVal) * 0.5
                        fuzzy = (leftVal - rightVal) * 0.5
                        infin = 1
                        cmds.floatField("if_dn_fzmax" + str(index), e = True, v = fuzzy)
                        cmds.setAttr(dcNode + ".fuzzyOut[" + str(index) + "]", fuzzy)
                except:
                    pass
                    
        elif lggSegs[i] == ">":
            if i+1 < maxI:
                try:
                    inval = float(lggSegs[i+1])
                    infot = 1
                except:
                    pass
            
        elif lggSegs[i] == "<":
            if i+1 < maxI:
                try:
                    otval = float(lggSegs[i+1])
                    infin = 1
                except:
                    pass
                
        elif lggSegs[i] == "=":
            if i+1 < maxI:
                try:
                    inval = float(lggSegs[i+1])-1
                    otval = float(lggSegs[i+1])+1
                    continue
                except:
                    pass
        
        elif lggSegs[i] == "LEFT" or lggSegs[i] == "UP" or lggSegs[i] == "FORWARD" or lggSegs[i] == "UPHILL" or lggSegs[i] == "FRONT":
            if isInverse:
                infin = 1
                otval = 0.0
            else:
                inval = 0.0
                infot = 1
                
            if lgg.find("spot") >= 0 or lgg.find("zone") >= 0:
                infot = 0
                otval = 150.0
                
                
                
        elif lggSegs[i] == "RIGHT" or lggSegs[i] == "DOWN" or lggSegs[i] == "BACKWARD" or lggSegs[i] == "DOWNHILL"or lggSegs[i] == "BACK":
            if isInverse:
                inval = 0.0
                infot = 1
            else:
                infin = 1
                otval = 0.0
                
            if lgg.find("spot") >= 0 or lgg.find("zone") >= 0:
                infin = 0
                inval = -150.0
                
        elif lggSegs[i] == "0~1":
            inval = 0.5
            infot = 1
            
            
    if isBool:
        inval = 1.0
        infot = 1.0
            
    
    #print inval;
    #print otval;
    
    # fill info into global
    # simple command and parse and fill
    #print index
    #print infin
    #print infot
    #print inval
    #print otval
    globalNode = McdGetMcdGlobalNode()
    
    cmds.setAttr(globalNode + ".cmdMaster[12]", lgg, type = "string")
    cmds.setAttr(globalNode + ".cmdMaster[13]", dcNode, type = "string")
    
    cmds.setAttr(globalNode + ".floatMaster[10]", index)
    cmds.setAttr(globalNode + ".floatMaster[11]", infin)
    cmds.setAttr(globalNode + ".floatMaster[12]", infot)
    cmds.setAttr(globalNode + ".floatMaster[13]", inval)
    cmds.setAttr(globalNode + ".floatMaster[14]", otval)
    
    
    melcmd = "McdSimpleCommand -exe 17";
    mel.eval(melcmd)
    
    updatePSRNodeDataWrapper(index, dcNode)
    
    stri = str(index);
    if infin:
        cmds.floatField("if_dn_fzmin" + str(index), e = True, vis = False)
        cmds.floatField("if_dn_fzmax" + str(index), e = True, vis = True)
        
        cmds.floatField("gfpos1" + stri, e = True, vis = False) # graphic
        cmds.floatField("gfpos2" + stri, e = True, vis = False) # graphic
        cmds.floatField("gfpos3" + stri, e = True, vis = True) # graphic
        cmds.floatField("gfpos4" + stri, e = True, vis = True) # graphic
        
    elif infot:
        cmds.floatField("if_dn_fzmin" + str(index), e = True, vis = True)
        cmds.floatField("if_dn_fzmax" + str(index), e = True, vis = False)
        
        cmds.floatField("gfpos1" + stri, e = True, vis = True) # graphic
        cmds.floatField("gfpos2" + stri, e = True, vis = True) # graphic
        cmds.floatField("gfpos3" + stri, e = True, vis = False) # graphic
        cmds.floatField("gfpos4" + stri, e = True, vis = False) # graphic
        
    else:
        cmds.floatField("if_dn_fzmin" + str(index), e = True, vis = True)
        cmds.floatField("if_dn_fzmax" + str(index), e = True, vis = True)
        
        cmds.floatField("gfpos1" + stri, e = True, vis = 1) # graphic
        cmds.floatField("gfpos2" + stri, e = True, vis = 1) # graphic
        cmds.floatField("gfpos3" + stri, e = True, vis = 1) # graphic
        cmds.floatField("gfpos4" + stri, e = True, vis = 1) # graphic
        
    if lgg.find("0~1") > 0:
        cmds.floatField("if_dn_fzmin" + str(index), e = True, v = 0.5)
        
    if lgg.find("I lean") == 0:
        cmds.floatField("if_dn_fzmin" + str(index), e = True, v = 0.2)
        cmds.floatField("if_dn_fzmax" + str(index), e = True, v = 0.2)
    
    
    
def McdMenuFillDecision(lgg, dcID, dcNode):
    sid = str(dcID)
    
    cmds.setAttr(dcNode + ".outputLanguage[" + sid + "]", lgg, type = "string")
    cmds.textField("tf_dn_outLgg" + str(dcID), e = True, tx = lgg)
    
    McdParseOutLanguageFirstTime(lgg, dcNode, dcID)
    

def McdAddOutMenuItem(lgg, index, dcNode):
    if lgg.find("---") > 0:
        return
    
    cmds.menuItem(label = lgg, c = "McdMenuFillDecision(\"" + lgg + "\", " + str(index) + ", \""+dcNode+"\")" )

def McdOutLanguageMenu(index, dcNode, control):
    
    cmds.popupMenu()
    

    cmds.menuItem(label = "Sphere", subMenu = True)
    McdAddOutMenuItem("set my sphere color ??", index, dcNode)
    McdAddOutMenuItem("set my sphere radius ??", index, dcNode)
    cmds.setParent("..", menu = True)
    


    cmds.menuItem(label = "Color", subMenu = True)
    McdAddOutMenuItem("set my color ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Move and Rotate", subMenu = True)
    McdAddOutMenuItem("move FORWARD as speed ??", index, dcNode)
    McdAddOutMenuItem("move BACKWARD as speed ??", index, dcNode)
    McdAddOutMenuItem("move UP as speed ??", index, dcNode)
    McdAddOutMenuItem("move DOWN as speed ??", index, dcNode)
    McdAddOutMenuItem("move LEFT as speed ??", index, dcNode)
    McdAddOutMenuItem("move RIGHT as speed ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("rotate to LEFT as speed ??", index, dcNode)
    McdAddOutMenuItem("rotate to RIGHT as speed ??", index, dcNode)
    McdAddOutMenuItem("rotate UP as speed ??", index, dcNode)
    McdAddOutMenuItem("rotate DOWN as speed ??", index, dcNode)
    McdAddOutMenuItem("roll to RIGHT as speed ??", index, dcNode)
    McdAddOutMenuItem("roll to LEFT as speed ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Action Playback", subMenu = True)
    McdAddOutMenuItem("play action:?? priority 1", index, dcNode)
    McdAddOutMenuItem("play action randomly from group:?? priority 1", index, dcNode)
    McdAddOutMenuItem("select and play one action from group:?? priority 1", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("random all actions playback speed (0.75, 1.25)", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("change all actions playback speed ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("change action:?? playback speed ??", index, dcNode)
    McdAddOutMenuItem("change actions in group:?? playback speed ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("fix seed of action selection", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("play action randomly from group:??(<seed>) priority 1", index, dcNode)
    McdAddOutMenuItem("select and play one action from group:??(<seed>) priority 1", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Action Blend", subMenu = True)
    McdAddOutMenuItem("blend to action:?? intensity 1", index, dcNode)
    McdAddOutMenuItem("blend to blends group:?? intensity 1", index, dcNode)
    McdAddOutMenuItem("blend to one in blends group:?? intensity 1", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Action Story", subMenu = True)
    McdAddOutMenuItem("rehearsal actions in story:??? priority 1", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "IK", subMenu = True)
    McdAddOutMenuItem("offset IK:??? in X value ??", index, dcNode)
    McdAddOutMenuItem("offset IK:??? in Y value ??", index, dcNode)
    McdAddOutMenuItem("offset IK:??? in Z value ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Visible", subMenu = True)
    McdAddOutMenuItem("hide me", index, dcNode)
    McdAddOutMenuItem("unhide me", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Aim", subMenu = True)
    McdAddOutMenuItem("bone:?? aim to:?? axis:?? as speed 0.5", index, dcNode)
    McdAddOutMenuItem("bone:?? aim to:?? axis:?? 2D as speed 0.5", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem('bone:?? (??) aim to:?? axis:?? as speed 0.5', index, dcNode)
    McdAddOutMenuItem("bone:?? (??) aim to:?? axis:?? 2D as speed 0.5", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "HP and MP", subMenu = True)
    McdAddOutMenuItem("set hp value ??", index, dcNode)
    McdAddOutMenuItem("set mp value ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("change hp as speed ??", index, dcNode)
    McdAddOutMenuItem("change mp as speed ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    cmds.menuItem(label = "Maya Attribute", subMenu = True)
    McdAddOutMenuItem("set maya attribute:??? value ??", index, dcNode)
    McdAddOutMenuItem("change maya attribute:??? as speed ??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("set rand(??,??) to maya attribute:???", index, dcNode)
    McdAddOutMenuItem("set time-based rand(??,??) to maya attribute:???", index, dcNode)
    cmds.setParent("..", menu = True)
    


    cmds.menuItem(label = "Dynamics", subMenu = True)
    McdAddOutMenuItem("enable dynamics", index, dcNode)
    McdAddOutMenuItem("enable dynamics from bone:??", index, dcNode)
    McdAddOutMenuItem("enable body dynamics", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("detach dynamics from bone:??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    # pin
    McdAddOutMenuItem("pin contact dynamics from bone:??", index, dcNode)
    McdAddOutMenuItem("unpin contact dynamics from bone:??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("turn ON pin dynamics from bone:??", index, dcNode)
    McdAddOutMenuItem("turn OFF pin dynamics from bone:??", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("enable dynamics with force ??", index, dcNode)
    McdAddOutMenuItem("disable dynamics and keep last pose", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("renewal from dynamics", index, dcNode)
    cmds.setParent("..", menu = True)
    
    cmds.menuItem(label = "Dynamics CCT", subMenu = True)
    McdAddOutMenuItem("ADD CCT to agent", index, dcNode)
    McdAddOutMenuItem("REMOVE CCT from agent", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("disable CCT Gravity", index, dcNode)
    McdAddOutMenuItem("enable CCT Gravity", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("disable CCT control root", index, dcNode)
    McdAddOutMenuItem("enable CCT control root", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("set root-CCT offset X ??", index, dcNode)
    McdAddOutMenuItem("set root-CCT offset Y ??", index, dcNode)
    McdAddOutMenuItem("set root-CCT offset Z ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    cmds.menuItem(label = "Dynamics Servo Force", subMenu = True)
    McdAddOutMenuItem("turn ON servo force", index, dcNode)
    McdAddOutMenuItem("turn OFF servo force", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    cmds.menuItem(label = "MEL and Python", subMenu = True)
    McdAddOutMenuItem("run MEL command:???", index, dcNode)
    McdAddOutMenuItem("run PYTHON command:???", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Blend Shape", subMenu = True)
    McdAddOutMenuItem("set blend shape:??? value 1", index, dcNode)
    McdAddOutMenuItem("set blend shape:??? value 0", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Action Sync", subMenu = True)
    McdAddOutMenuItem("tell near agent my action", index, dcNode)
    McdAddOutMenuItem("hear and receive action info", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("tell near agent my action use channel:??", index, dcNode)
    McdAddOutMenuItem("hear and receive action info only channel:??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Parent", subMenu = True)
    McdAddOutMenuItem("parent me to:??", index, dcNode)
    McdAddOutMenuItem("unparent me to world", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "UV Pin", subMenu = True)
    McdAddOutMenuItem("use UV pin me to:??", index, dcNode)
    McdAddOutMenuItem("unpin me from any object", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Curve Pin", subMenu = True)
    McdAddOutMenuItem("use curve pin me to:??", index, dcNode)
    McdAddOutMenuItem("unpin me from any curve", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Master", subMenu = True)
    McdAddOutMenuItem("follow my master", index, dcNode)
    McdAddOutMenuItem("follow my master bone:??", index, dcNode)
    McdAddOutMenuItem("follow my master bone:?? with offset:(0,0,0,0,0,0)", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Slave", subMenu = True)
    McdAddOutMenuItem("enable dynamics for my slave", index, dcNode)
    McdAddOutMenuItem("my slave follow me", index, dcNode)
    McdAddOutMenuItem("my slave follow my bone:??", index, dcNode)
    McdAddOutMenuItem("my slave follow my bone:?? with offset:(0,0,0,0,0,0)", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("enable dynamics for my slave[?]", index, dcNode)
    McdAddOutMenuItem("my slave[?] follow me", index, dcNode)
    McdAddOutMenuItem("my slave[??] follow bone:??", index, dcNode)
    McdAddOutMenuItem("my slave[??] follow bone:?? with offset:(0,0,0,0,0,0)", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    cmds.menuItem(label = "Scale", subMenu = True)
    McdAddOutMenuItem("scale me as speed ??", index, dcNode)
    McdAddOutMenuItem("disable agent scale affect action move", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Particle Follow", subMenu = True)
    McdAddOutMenuItem("follow target particle translate as speed ??", index, dcNode)
    McdAddOutMenuItem("follow target particle moving orient as speed ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    #cmds.menuItem(label = "Formation Follow", subMenu = True)
    #McdAddOutMenuItem("follow target formation point translate as speed ??", index, dcNode)
    #McdAddOutMenuItem("follow target formation point moving orient as speed ??", index, dcNode)
    #cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Placer Formation Follow", subMenu = True)
    McdAddOutMenuItem("follow target place point translate as speed ??", index, dcNode)
    McdAddOutMenuItem("follow target place point moving orient as speed ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "Bone Offset", subMenu = True)
    McdAddOutMenuItem("set my bone:?? translate X offset ??", index, dcNode)
    McdAddOutMenuItem("set my bone:?? translate Y offset ??", index, dcNode)
    McdAddOutMenuItem("set my bone:?? translate Z offset ??", index, dcNode)
    McdAddOutMenuItem("set my bone:?? rotate X offset ??", index, dcNode)
    McdAddOutMenuItem("set my bone:?? rotate Y offset ??", index, dcNode)
    McdAddOutMenuItem("set my bone:?? rotate Z offset ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    

    cmds.menuItem(label = "Bone Rotate Speed", subMenu = True)
    McdAddOutMenuItem("rotate my bone:?? in X axis as speed ??", index, dcNode)
    McdAddOutMenuItem("rotate my bone:?? in Y axis as speed ??", index, dcNode)
    McdAddOutMenuItem("rotate my bone:?? in Z axis as speed ??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    

    cmds.menuItem(label = "Action Animation", subMenu = True)
    McdAddOutMenuItem("tell near agent my action", index, dcNode)
    McdAddOutMenuItem("hear and receive action info", index, dcNode)
    McdAddMenuItem("----------", index, dcNode)
    McdAddOutMenuItem("tell near agent my action use channel:??", index, dcNode)
    McdAddOutMenuItem("hear and receive action info only channel:??", index, dcNode)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.menuItem(label = "< Direct Engine >", subMenu = True)
    cmds.menuItem(label = "Terrain", subMenu = True)
    McdAddMenuItem("----- Height -----", index, dcNode, False)
    McdAddOutMenuItem("adapt height of terrain intensity 0.5", index, dcNode)         #terrFlw.h
    McdAddMenuItem("----- Left/Right -----", index, dcNode, False)
    McdAddOutMenuItem("adapt left/right of terrain intensity 0.5", index, dcNode)     #terrFlw.lr
    McdAddMenuItem("----- Front/Back -----", index, dcNode, False)
    McdAddOutMenuItem("adapt uphill/downhill of terrain intensity 0.5", index, dcNode)     #terrFlw.fb
    McdAddOutMenuItem("adapt only uphill of terrain intensity 0.5", index, dcNode)    #terrFlw.l
    McdAddOutMenuItem("adapt only downhill of terrain intensity 0.5", index, dcNode)  #terrFlw.r
    cmds.setParent("..", menu = True)
    cmds.menuItem(label = "Action", subMenu = True)
    McdAddMenuItem("----- Randomize -----", index, dcNode, False)
    McdAddOutMenuItem("random all actions playback speed (0.75, 1.25)", index, dcNode)
    cmds.setParent("..", menu = True)
    cmds.menuItem(label = "Avoid Agents", subMenu = True)
    McdAddMenuItem("----- Avoid by Sphere Range -----", index, dcNode, False)
    McdAddOutMenuItem("avoid near agents by turn and slow priority 1", index, dcNode)
    cmds.setParent("..", menu = True)
    cmds.menuItem(label = "Road Logic", subMenu = True)
    McdAddMenuItem("----- Road -----", index, dcNode, False)
    McdAddOutMenuItem("follow road priority 1", index, dcNode)
    McdAddOutMenuItem("follow road[??] priority 1", index, dcNode)
    McdAddMenuItem("----- Inverse Road -----", index, dcNode, False)
    McdAddOutMenuItem("follow road inverse direction priority 1", index, dcNode)
    McdAddOutMenuItem("follow road[??] inverse direction priority 1", index, dcNode)
    cmds.setParent("..", menu = True)
    cmds.menuItem(label = "Spot Logic", subMenu = True)
    McdAddMenuItem("----- Follow -----", index, dcNode, False)
    McdAddOutMenuItem("follow spot priority 1", index, dcNode)
    McdAddOutMenuItem("follow spot[??] priority 1", index, dcNode)
    McdAddOutMenuItem("follow spot in distance ?? priority 1", index, dcNode)
    McdAddOutMenuItem("follow spot[??] in distance ?? priority 1", index, dcNode)
    McdAddMenuItem("----- Avoid -----", index, dcNode, False)
    McdAddOutMenuItem("avoid spot priority 1", index, dcNode)
    McdAddOutMenuItem("avoid spot[??] priority 1", index, dcNode)
    McdAddOutMenuItem("avoid spot in distance ?? priority 1", index, dcNode)
    McdAddOutMenuItem("avoid spot[??] in distance ?? priority 1", index, dcNode)
    McdAddMenuItem("----- Escape -----", index, dcNode, False)
    McdAddOutMenuItem("escape spot priority 1", index, dcNode)
    McdAddOutMenuItem("escape spot[??] priority 1", index, dcNode)
    McdAddOutMenuItem("escape spot in distance ?? priority 1", index, dcNode)
    McdAddOutMenuItem("escape spot[??] in distance ?? priority 1", index, dcNode)
    cmds.setParent("..", menu = True)
    cmds.menuItem(label = "Zone Logic", subMenu = True)
    McdAddMenuItem("----- Follow -----", index, dcNode, False)
    McdAddOutMenuItem("follow zone priority 1", index, dcNode)
    McdAddOutMenuItem("follow zone[??] priority 1", index, dcNode)
    McdAddOutMenuItem("follow zone in distance ?? priority 1", index, dcNode)
    McdAddOutMenuItem("follow zone[??] in distance ?? priority 1", index, dcNode)
    McdAddMenuItem("----- Avoid -----", index, dcNode, False)
    McdAddOutMenuItem("avoid zone priority 1", index, dcNode)
    McdAddOutMenuItem("avoid zone[??] priority 1", index, dcNode)
    McdAddOutMenuItem("avoid zone in distance ?? priority 1", index, dcNode)
    McdAddOutMenuItem("avoid zone[??] in distance ?? priority 1", index, dcNode)
    McdAddMenuItem("----- Escape -----", index, dcNode, False)
    McdAddOutMenuItem("escape zone priority 1", index, dcNode)
    McdAddOutMenuItem("escape zone[??] priority 1", index, dcNode)
    McdAddOutMenuItem("escape zone in distance ?? priority 1", index, dcNode)
    McdAddOutMenuItem("escape zone[??] in distance ?? priority 1", index, dcNode)
    cmds.setParent("..", menu = True)
    cmds.setParent("..", menu = True)
    
    
    
    cmds.setParent("..", menu = True)
    
def McdParseOutLanguageFirstTime(lgg, dcNode, index):
    
    
    isEnable = False
    if lgg.find("enable") == 0 or \
                    lgg.find("hide") == 0 or \
                    lgg.find("detach") == 0 or \
                    lgg.find("ADD") == 0 or \
                    lgg.find("run") == 0 or \
                    lgg.find("hear") == 0 or \
                    lgg.find("tell") == 0 or \
                    lgg.find("parent me") == 0 or \
                    lgg.find("unparent") == 0 or \
                    lgg.find("use UV pin") == 0 or \
                    lgg.find("use curve pin") == 0 or \
                    lgg.find("unpin me") == 0 or \
                    lgg.find("pin contact") >= 0 or \
                    lgg.find("follow my") >= 0 or \
                    lgg.find("follow bone:") >= 0 or \
                    lgg.find("follow me") >= 0 or \
                    lgg.find("turn ON") >= 0 or \
                    lgg.find("fix seed") >= 0 or \
                    lgg.find("set rand(") >= 0 or \
                    lgg.find("set time-based rand(") >= 0 or \
                    lgg.find("renewal") >= 0 or \
                    lgg.find("disable agent sc") >= 0:
        isEnable = True
    
    
    
    
    isDisable = False
    if lgg.find("disable") == 0 or \
                    lgg.find("unhide") == 0 or \
                    lgg.find("REMOVE") == 0 or \
                    lgg.find("turn OFF") >= 0:
        isDisable = True
        
    if lgg == "disable CCT Gravity":
        isEnable = True
        isDisable = False
        
        
    isInverse = False
    if lgg.find("move BACKWARD") == 0 or \
                    lgg.find("move RIGHT") >= 0 or \
                    lgg.find("roll to LEFT") >= 0 or \
                    lgg.find("rotate to RIGHT") >= 0 or \
                    lgg.find("rotate UP") >= 0 or \
                    lgg.find("move DOWN") >= 0:
        isInverse = True
        
        
    # special condition:
    if lgg.find("with force") > 0:
        isEnable = False
    if lgg.find("last pose") > 0:
        isDisable = False
        isEnable = True
        
        
        
    
    if len(lgg) < 2:
        return None
    
    lggSegs = lgg.split(" ")
    if MIsBlank(lggSegs):
        return None
    
    outVal = 0.0
    
    if isEnable:
        outVal = 1.0
    elif isDisable: 
        outVal = 0.0
    else:
        try:
            outVal = float(lggSegs[-1])
            if isInverse:
                outVal *= -1.0
        except:
            outVal = 0.0
            
    #try:
    #    outVal = float(lggSegs[-1])
    #except:
    #    pass

    globalNode = McdGetMcdGlobalNode()
    
    cmds.setAttr(globalNode + ".cmdMaster[14]", lgg, type = "string")
    cmds.setAttr(globalNode + ".cmdMaster[13]", dcNode, type = "string")
    
    cmds.setAttr(globalNode + ".floatMaster[10]", index)
    cmds.setAttr(globalNode + ".floatMaster[15]", outVal)
    
    if lgg.find("random all") == 0:
        lp = lgg.find("(")
        rp = lgg.find(")")
        if lp > 0 and rp > 0:
            dataStr = McdRemoveBlankString(lgg[lp+1:rp])
            if dataStr.find(",") > 0:
                dataSeg = dataStr.split(",")
                minVal = float(dataSeg[0])
                maxVal = float(dataSeg[1])
                
                minVal *= 1000.0
                minVal_int = int(minVal)
                minVal = float(minVal_int)
                
                outVal = minVal + maxVal
                
                cmds.setAttr(globalNode + ".floatMaster[15]", outVal)
                
    
    
    melcmd = "McdSimpleCommand -exe 18";
    mel.eval(melcmd)
    
    
    
def switchLggMode():
    McdSetAllLggMode()
    McdRefreshDecisionEditor()
    

def switchChMode():
    McdSetAllOldMode()
    McdRefreshDecisionEditor()
    

def McdSelectSourceDcNode(dcNode):
    allConns = cmds.listConnections(dcNode, s = True, d = False)
    
    if not MIsBlank(allConns):
        for i in range(len(allConns)):
            if cmds.nodeType(allConns[i]) == "McdDecision":
                cmds.select(allConns[i])
                return
        
    
    

    
    
    


    