## +
## ===================================================================
## Copyright(C) 2010 - 2014 Basefount Software Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## Limitd. ("Basefount") and/or its licensors, which is
## protected by Chinese copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNTAIN 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdAutoGenAgentCache.py
##
##  Description:
##    Generate agent cache in command line
##
## ===================================================================
## -

import maya.cmds as cmds
import maya.mel as mel
from McdGeneral import *
import os

def performLCachePreCheckBat(placeNames):
    
    # agent exist
    allAgents = cmds.ls(type = "McdAgent")
    if allAgents == [] or allAgents == None:
        raise Exception ("No agents in scene.")
    
    for i in range(len(placeNames)):
        placeName = placeNames[i]
            
        # path writable:
        globalNode = McdGetMcdGlobalNode()
        rawPath = cmds.getAttr(globalNode + ".cacheFolder")
        
        cacheFolder = envPath2AbsPath(rawPath)
        
        subFolder = McdGetPlaceNodeNameForSubfolderBat(placeName)
        
        if cacheFolder == "" or cacheFolder == None:
            raise Exception("The output folder is not exist.")
            
        if not os.access(cacheFolder, os.W_OK):
            raise Exception("The output folder is not exist.")
        
        cacheFolder += "/" + subFolder
        
        if not os.access(cacheFolder, os.R_OK):
            try:
                os.mkdir(cacheFolder)
            except:
                raise Exception("The output folder is cannot be created")


def McdGetPlaceNodeNameForSubfolderBat(placeName):
    
    colonStr = ":"
    treeStr = "|"
    dashStr = "-"
    
    nodeResultName = placeName
    
    if nodeResultName.find(colonStr) >= 0:
        outStrs1 = nodeResultName.split(colonStr)
        nbSeg = len(outStrs1);
        nodeResultName = outStrs1[nbSeg-1];
    
    
    if nodeResultName.find(treeStr) >= 0:
        outStrs2 = nodeResultName.split(treeStr)
        nbSeg = len(outStrs2);
        nodeResultName = ""
        for i in range (nbSeg):
            if i != nbSeg-1:
                nodeResultName += outStrs2[i] + dashStr;
            else:
                nodeResultName += outStrs2[i];

    return nodeResultName

def McdBatchAgentCacheDoIt():
    # ---------------------------------------
    # place agent out
    # turn off mesh drive and agent cache
    # go back to start frame
    # make agent cache
    # ---------------------------------------

    
    # place agent out
    cmd = "McdPlacementCmd -am 3 -ign 0;"
    mel.eval(cmd)
    McdAfterPlaceFunction()
    
    # turn off mesh drive and agent cache
    allGlb = cmds.ls(type = "McdGlobal")
    if McdIsBlank(allGlb):
        raise Exception("No found McdGlobal Node.")
        return
    for i in range(len(allGlb)):
        cmds.setAttr(allGlb[i] + ".enableMeshDrv", 0)
        cmds.setAttr(allGlb[i] + ".selectionCallback", 1)
        cmds.setAttr(allGlb[i] + ".enableCache", 0)
    
    # check whether use layer placement:
    allPlaces = cmds.ls(type = "McdPlace")
    placeNames = []
    if not MIsBlank(allPlaces):
        # make agent cache
        for i in range(len(allPlaces)):
            isLCachePlace = cmds.getAttr(allPlaces[i] + ".makeCache")
            if isLCachePlace:
                placeNames.append(allPlaces[i])
                
    if not MIsBlank(placeNames):
        performLCachePreCheckBat(placeNames)
    
    
    
    McdMakeAgentCacheBatch()
    
    
def McdMakeAgentCacheBatch():

    performCachePreCheckBatch()

    # batch make cache: --------------------------------------------------------
    startFrame = cmds.playbackOptions(q =True, min = True)
    endFrame = cmds.playbackOptions(q =True, max = True)
    
    
    brainNode = mel.eval("McdSimpleCommand -execute 3")
    solverFrame = cmds.getAttr(brainNode + ".startTime")
    solverFrame -= 1
    if solverFrame > startFrame:
        solverFrame = startFrame
    
    amount = 0
    counter = 0
    totalCount = endFrame - startFrame
    
    globalNode = mel.eval("McdSimpleCommand -execute 2")
    
    isCallback = cmds.getAttr(globalNode + ".boolMaster[6]")
    if isCallback:
        executePreSim(globalNode)
    
    cmds.setAttr(globalNode + ".enableIDCM", 1)
    # from solverFrame to endFrame:
    while(solverFrame <= endFrame):
        print "Caching: " + str(solverFrame)
        
        if isCallback:
            executePreFrame(globalNode)
        
        cmds.currentTime(solverFrame)
        
        if solverFrame >= startFrame:
            # deal with batch cache
            mel.eval("McdMakeCacheCmd;")
            
        if isCallback:
            executePostFrame(globalNode)
            
        solverFrame += 1
        
    print "Done!"
    
    cmds.setAttr(globalNode + ".cacheVersion", 155)
    
    if isCallback:
        executePostSim(globalNode)
    
def performCachePreCheckBatch():
    # agent exist
    allAgents = cmds.ls(type = "McdAgent")
    if allAgents == [] or allAgents == None:
        raise Exception("There is no agent in scene for making cache.")
        
    # path writable:
    globalNode = mel.eval("McdSimpleCommand -execute 2")
    cacheFolder = cmds.getAttr(globalNode + ".cacheFolder")
    if cacheFolder == "" or cacheFolder == None:
        raise Exception("The output folder is not exist.")
        
    if not os.access(cacheFolder, os.W_OK):
        raise Exception("The output folder is not exist.")
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    