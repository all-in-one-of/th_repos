## +
## ===================================================================
## Copyright(C) 2010 - 2014 Basefount Software Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## Limitd. ("Basefount") and/or its licensors, which is
## protected by Chinese copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdActionEditorGUI
##
##  Description:
##    For editing McdAction node
##
## ===================================================================
## -

import maya.cmds as cmds
import maya.mel as mel
from McdGeneral import *

import McdActionEditor
reload(McdActionEditor)
from McdActionEditor import *


def McdActionEditorGUI():
    #cmds.select("walk_action_loco");
    
    winName = "McdActionEditor"
    if cmds.window(winName, ex = True):
        cmds.deleteUI(winName)
    
    activeName = McdGetActiveAgentName()
    globalNode = McdGetMcdGlobalNode()
    
    cmds.window(winName, title = "Action Editor",rtf =True,menuBar=True, width=660)
    cmds.menu( label='Options')
    cmds.menuItem( label='Refresh contents', c = "McdRefreshActionEditor()")
    cmds.menuItem( label='Clone IK Setup (first to all)', c = "McdCloneIKSetup()")
    cmds.menuItem( label='Auto Fill All Locks', c = "McdIKLockAllSetup()")
    cmds.menuItem( label='Help' )
    cmds.menuItem( divider=True )
    cmds.menuItem( label='Exit', c = "McdExitActionEditor()" )

    form = cmds.formLayout()
    tabs = cmds.tabLayout(innerMarginWidth=5, innerMarginHeight=5)
    cmds.formLayout( form, edit=True, attachForm=((tabs, 'top', 0), (tabs, 'left', 0), \
                                                (tabs, 'bottom', 0), (tabs, 'right', 0)) )
    
    selActNode = ""
    try:
        selActNode = cmds.ls(sl = True)[0]
    except:
        pass
    
    selObj = cmds.ls(sl = True, long = True)
    isAct = 0
    actNode = ""
    actionName = ""
    if selObj != [] and selObj != None:
        actNode = selObj[0]
        if cmds.nodeType(actNode) == "McdAction" :
            cmds.setAttr(globalNode + ".nextAgentType", actNode, type = "string")
            isAct = mel.eval("McdCheckNodeActiveCmd;")
    
    if isAct == 1:
        actionName = actNode.split("_action_")[0]
        dLength = cmds.getAttr(actNode + ".length")
        dRate = cmds.getAttr(actNode + ".rate")
        dMatchName = cmds.getAttr(actNode + ".matchName")
        dIsFinal = cmds.getAttr(actNode + ".isFinalAction")
        dEnPBlend = cmds.getAttr(actNode + ".pBlend")
        
        dIsCycle = cmds.getAttr(actNode + ".isCycle")
        dCycleFilter = cmds.getAttr(actNode + ".cycleFilter")
        dTransIn = cmds.getAttr(actNode + ".transIn")
        dTransOut = cmds.getAttr(actNode + ".transOut")
        dOutBlock = cmds.getAttr(actNode + ".outBlock")
        
        dTx = cmds.getAttr(actNode + ".txState");
        dTy = cmds.getAttr(actNode + ".tyState");
        dTz = cmds.getAttr(actNode + ".tzState");
        dRx = cmds.getAttr(actNode + ".rxState");
        dRy = cmds.getAttr(actNode + ".ryState");
        dRz = cmds.getAttr(actNode + ".rzState");
    
        dIkid = cmds.getAttr(actNode + ".ikid")
        
        dEntryMin = 0;
        dEntryMax = 0;
        dExitNum = 4;
        dEntrySeedOffset = 0;
        try:
            dExitNum = cmds.getAttr(actNode + ".exitNum")
        except:
            pass
        try:
            dEntryMinTemp = cmds.getAttr(actNode + ".entryMin")
            dEntryMin = int(float(dEntryMinTemp) / float(dLength) * 100)
            dEntryMaxTemp = cmds.getAttr(actNode + ".entryMax") * 100
            dEntryMax = int(float(dEntryMaxTemp) / float(dLength))
            dEntrySeedOffset = cmds.getAttr(actNode + ".etrSdOff")
            dEntryRandWhTrns = cmds.getAttr(actNode + ".etrRWTrs")
        except:
            pass
        
        dJumpFrame = 0
        dLandFrame = 0
        attachMesh = False
        try:
            dJumpFrame = cmds.getAttr(actNode + ".jumpFrame")
            dLandFrame = cmds.getAttr(actNode + ".landFrame")
            dAttachMesh = cmds.getAttr(actNode + ".attachMesh")
        except:
            pass
    
    #--------------------------  Action Editor  --------------------------#
    child0 = cmds.columnLayout(adj = True)
    
    cmds.rowColumnLayout(nc = 8, cw = [(1,100),(2,80),(3,10),(4,70),(5,140),(6,10),(7,80),(8,100)])
    cmds.text(l = "Active Agent Name:")
    cmds.textField(ed = False,  tx = activeName)
    cmds.text(l = "")
    cmds.text(l = "Node Name:")
    cmds.textField("ActionNodeName11", ed = False, tx = actNode)
    cmds.text(l = "")
    cmds.text(l = "Action Name:")
    cmds.textField("ActionName", ed = False, tx = actionName)
    cmds.setParent("..")
    
    if isAct == 1:
        cmds.rowColumnLayout(nc = 4, cw = [(1,140),(2,170),(3,180),(4,165)])
        cmds.text(l = "Basic Attribute", fn = "smallBoldLabelFont", align = "left")
        cmds.text(l = "Transition", fn = "smallBoldLabelFont", align = "left")
        cmds.text(l = "Agent Transform Speed", fn = "smallBoldLabelFont", align = "left")
        cmds.text(l = "Agent Transform Fix", fn = "smallBoldLabelFont", align = "left")
        
        # // basic data:
        cmds.columnLayout() # ----------------------------------------
        
        cmds.rowColumnLayout(nc = 3, cw = [(1,70),(2,60),(3,20)])
        cmds.text(l = "Length")
        cmds.intField("actLength_if", ed = False, v = dLength)
        cmds.text(l = "")
        
        cmds.text(l = "Rate")
        cmds.floatField("actRate_ff", v = dRate, cc = 'setSingleNumericAttr(2, "actRate_ff", "'+actNode+'", "rate")')
        cmds.text(l = "")
        
        cmds.text(l = "Exit Block", )
        cmds.floatField("actotb_ff", v = dOutBlock, cc = 'setSingleNumericAttr(2, "actotb_ff", "'+actNode+'", "outBlock")')
        cmds.text(l = "")
        
        cmds.text(l = "Match Name")
        cmds.checkBox("actMNA_cb", l = "", v = dMatchName, onc = 'setSingleNumericAttr(0, "actMNA_cb", "'+actNode+'", "matchName")',\
                                                         ofc = 'setSingleNumericAttr(0, "actMNA_cb", "'+actNode+'", "matchName")')
        
        cmds.text(l = "")
        
        cmds.setParent("..")
        
        cmds.rowColumnLayout(nc = 5, cw = [(1, 30),(2,30),(3, 10), (4,30),(5,30)])
        cmds.text(l = "from")
        cmds.intField("trim_act_in", min = 1, v = 1)
        cmds.text(l = "to")
        cmds.intField("trim_act_out", min = 2, v = 2)
        cmds.button(l = "Trim", c = "McdTrimAction(\"" + actNode + "\")")
        cmds.setParent("..")
        
        try:
            dExitTrigger = cmds.getAttr(actNode + ".exitTrigger")
        except:
            dExitTrigger = ""
        cmds.rowColumnLayout(nc = 2, cw = [(1,70), (2, 70)])
        cmds.text(l = "Exit Trigger")
        cmds.textField("ActionExitTrigger", tx = dExitTrigger, cc = "actionExitTriggerChange(\""+ actNode +"\")")
        cmds.setParent("..")
        
        cmds.setParent("..")# ----------------------------------------
        
        
        # // agent transform
        
        cmds.columnLayout() # ----------------------------------------
        
        cmds.rowColumnLayout(nc = 4, cw = [(1,70),(2,60), (3,20), (4, 30)])
        cmds.text(l = "Is Final")
        cmds.checkBox("actIFA_cb", l = "", v = dIsFinal, onc = 'setSingleNumericAttr(0, "actIFA_cb", "'+actNode+'", "isFinalAction")',\
                                                       ofc = 'setSingleNumericAttr(0, "actIFA_cb", "'+actNode+'", "isFinalAction")')
        cmds.text(l = "")
        cmds.text(l = "")
        
        cmds.text(l = "Is Cycle")
        cmds.checkBox("actCyc_cb", l = "", v = dIsCycle, onc = 'setSingleNumericAttr(0, "actCyc_cb", "'+actNode+'", "isCycle")',\
                                                       ofc = 'setSingleNumericAttr(0, "actCyc_cb", "'+actNode+'", "isCycle")')
        cmds.text(l = "")
        cmds.text(l = "")
        
        cmds.text(l = "Cycle Filter")
        cmds.floatField("actCyF_ff", v = dCycleFilter * 100, cc = 'setPercentNumericAttr(2, "actCyF_ff", "'+actNode+'", "cycleFilter", ' + str(dLength) + ')')
        cmds.text(l = "%")
        cmds.text("cycleFrame", l = str(int(dLength * dCycleFilter)), align = "left")
        
        cmds.text(l = "Entry Range")
        cmds.floatField("actEyR_ff", v = dTransIn * 100, cc = 'setPercentNumericAttr(2, "actEyR_ff", "'+actNode+'", "transIn", ' + str(dLength) + ')')
        cmds.text(l = "%")
        cmds.text("inFrame", l = str(int(dLength * dTransIn)), align = "left")
        
        cmds.text(l = "Exit Range", )
        cmds.floatField("actExR_ff", v = dTransOut * 100, cc = 'setPercentNumericAttr(2, "actExR_ff", "'+actNode+'", "transOut", ' + str(dLength) + ')')
        cmds.text(l = "%")
        cmds.text("outFrame", l = str(int(dLength - dLength * dTransOut)), align = "left")
        
        cmds.setParent("..")
        
        cmds.rowColumnLayout(nc = 5, cw = [(1, 80),(2,30),(3, 15), (4,30), (5, 15)])
        cmds.text(l = "Entry Random")
        cmds.intField("entry_min_act", min = 0, v = dEntryMin, cc = 'setSingleNumericAttr(1, "entry_min_act", "'+actNode+'", "entryMin")', max = 100)
        cmds.text(l = "to")
        cmds.intField("entry_max_act", min = 0, v = dEntryMax, cc = 'setSingleNumericAttr(1, "entry_max_act", "'+actNode+'", "entryMax")', max = 100)
        cmds.text(l = "%")
        cmds.setParent("..")
        cmds.rowColumnLayout(nc = 2, cw = [(1, 140),(2,30)])
        cmds.text(l = "Entry Rand Seed Offset")
        cmds.intField("entry_seed_offset", v = dEntrySeedOffset, cc = 'setSingleNumericAttr(1, "entry_seed_offset", "'+actNode+'", "etrSdOff")')
        cmds.text(l = "Entry Rand When Transit")
        cmds.checkBox("entry_when_trnsit", l = "", v = dEntryRandWhTrns, onc = 'setSingleNumericAttr(0, "entry_when_trnsit", "'+actNode+'", "etrRWTrs")',\
                                                                ofc = 'setSingleNumericAttr(0, "entry_when_trnsit", "'+actNode+'", "etrRWTrs")')
        cmds.setParent("..")
        
        cmds.setParent("..") # ----------------------------------------
        
        # // operation:
        cmds.columnLayout()
        cmds.rowColumnLayout(nc = 4, cw = [(1,20),(2,60),(3,20),(4,60)])
        cmds.text(l = "Tx")
        cmds.optionMenu("TxStat_om", cc = 'om_act_chnState("Tx", "TxStat_om", "'+actNode+'", "txState")')
        setupOmState(dTx, "Tx")
        
        cmds.text(l = "Rx")
        cmds.optionMenu("RxStat_om", cc = 'om_act_chnState("Rx", "RxStat_om", "'+actNode+'", "rxState")')
        setupOmState(dRx, "Rx")
        
        cmds.text(l = "Ty")
        cmds.optionMenu("TyStat_om", cc = 'om_act_chnState("Ty", "TyStat_om", "'+actNode+'", "tyState")')
        setupOmState(dTy, "Ty")
        
        cmds.text(l = "Ry")
        cmds.optionMenu("RyStat_om", cc = 'om_act_chnState("Ry", "RyStat_om", "'+actNode+'", "ryState")')
        setupOmState(dRy, "Ry")
        
        cmds.text(l = "Tz")
        cmds.optionMenu("TzStat_om", cc = 'om_act_chnState("Tz", "TzStat_om", "'+actNode+'", "tzState")')
        setupOmState(dTz, "Tz")
        
        cmds.text(l = "Rz")
        cmds.optionMenu("RzStat_om", cc = 'om_act_chnState("Rz", "RzStat_om", "'+actNode+'", "rzState")')
        setupOmState(dRz, "Rz")
        cmds.setParent("..")
        
        cmds.rowColumnLayout(nc = 2, cw = [(1,80),(2,80)])
        cmds.button(l = "Auto Fill", c = 'autoFillAgentData("'+actNode+'")')
        cmds.button("actrbacBtn", l = "Rebuild", c = "rebuildAgentData()")
        cmds.setParent("..")
        
        cmds.setParent("..")
        
        # // operation:
        cmds.columnLayout()
        # cmds.button("actrbacBtn", l = "Rebuild Agtent Transform", c = "rebuildAgentData()", w = 165)
        
        cmds.rowColumnLayout(nc = 4, cw = [(1,13),(2,50),(3,50),(4,50)])
        cmds.text(l = "T:")
        cmds.floatField("actRotADTX")
        cmds.floatField("actRotADTY")
        cmds.floatField("actRotADTZ")
        cmds.text(l = "R:")
        cmds.floatField("actRotADRX")
        cmds.floatField("actRotADRY")
        cmds.floatField("actRotADRZ")
        cmds.setParent("..")
        cmds.button("actracBtn", l = "Fix Agent Transform", c = "rotateAgentData()", w = 165)
        
        
        cmds.text(l = "Jump Tools", fn = "smallBoldLabelFont", align = "left")
        cmds.rowColumnLayout(nc = 4, cw = [(1, 30),(2,50),(3, 30), (4,50)])
        cmds.text(l = "Jump")
        cmds.intField("jumpFrameIF", min = 0, v = dJumpFrame, cc = 'setSingleNumericAttr(1, "jumpFrameIF", "'+actNode+'", "jumpFrame")')
        cmds.text(l = "Land")
        cmds.intField("landFrameIF", min = 0, v = dLandFrame, cc = 'setSingleNumericAttr(1, "landFrameIF", "'+actNode+'", "landFrame")')
        cmds.setParent("..")
        cmds.checkBox("jumpatthm_cb", l = "Jump attach McdLandMesh", v = dAttachMesh, onc = 'setSingleNumericAttr(0, "jumpatthm_cb", "'+actNode+'", "attachMesh")',\
                                                                ofc = 'setSingleNumericAttr(0, "jumpatthm_cb", "'+actNode+'", "attachMesh")')
        
        
        
        
        cmds.setParent("..")
        
        cmds.setParent("..")
        
        
        cmds.text(l = "Exit Choices (Frame Range):", fn = "smallBoldLabelFont", align = "left")
        cmds.rowColumnLayout(nc = 10, cw = [(1,65),(2,120),(3,65),(4,60),(5,60),(6,60),(7,50),(8,20),(9,120),(10,20)])
        for i in range(dExitNum):
            stri = str(i)
            dExitAct = cmds.getAttr(actNode + ".exitChoices[" + stri + "]")
            dExitStartFrame = cmds.getAttr(actNode + ".exitStartFrame[" + stri + "]")
            dExitEndFrame = cmds.getAttr(actNode + ".exitEndFrame[" + stri + "]")
            
            cmds.text(l = "Exit Action:")
            cmds.textField("actExit" + stri, tx = dExitAct, cc = 'setExitAction('+ stri +', "' + actNode + '")')
            cmds.text(l = "Start Frame:")
            cmds.floatField("actSF_ff" + stri, min = 0, max = dLength, v = dExitStartFrame, \
                                                cc = 'setIndexNumericAttr(2, ' +stri+ ', "actSF_ff", "'+actNode+'", "exitStartFrame")')
            cmds.text(l = "End Frame:")
            cmds.floatField("actEF_ff" + stri, min = 0, max = dLength, v = dExitEndFrame, \
                                                cc = 'setIndexNumericAttr(2, ' +stri+ ', "actEF_ff", "'+actNode+'", "exitEndFrame")')
            cmds.text(l = "Preview:")
            cmds.text(l = " 0")
            actExitSetupPreview(i, dExitStartFrame, dExitEndFrame, dLength)
            cmds.text(l = "  " + str(dLength))
        cmds.setParent("..")
        
        cmds.rowColumnLayout(nc = 2, cw = [(1,150),(2,150)])
        cmds.button(l = "Expand Exits Slot", c = 'McdExpandExitNum("' + actNode + '", 1)')
        cmds.button(l = "Shrink Exits Slot", c = 'McdExpandExitNum("' + actNode + '", -1)')
        cmds.setParent("..")
        
        try:
            dNotes = cmds.getAttr(actNode + ".comment")
        except:
            dNotes = "Put your comments here."
        cmds.rowColumnLayout("gui_dc_5", nc = 2, cw = [(1,85), (2, 415)])
        cmds.text(l = "Node Comments:")
        cmds.textField("ActionComments", tx = dNotes, cc = "actionNotesChange(\""+ actNode +"\")")
        cmds.setParent("..")
        
        
    else:
        cmds.text("gui_dc_na", l = "Please select an active action node firstly.", h = 50, bgc = [1.0, .5, .5])
        cmds.text(l = "")
        cmds.rowColumnLayout(nc = 3, cw = [(1,300 ),(2,200),(3,200)])
        cmds.text(l = "")
        cmds.button(l = "Click and Active Now", h = 50, bgc = [0.15, 0.7, 0.3], c = "McdActiveNonactiveNode('" + selActNode + "')")
        cmds.text(l = "")
        cmds.setParent("..")
                    
    cmds.setParent("..")
    
    
    
    #------------------------------- IK & IR Create --------------------------------#
    child1 = cmds.columnLayout(adj = True)
    if isAct == 1:
        cmds.rowColumnLayout(nc = 8, cw = [(1, 24), (2, 60), (3,140),(4,80),(5,120),(6,100),(7,80),(8,80)])
        
        cmds.text(l = "ID", fn = "smallBoldLabelFont")
        cmds.text(l = "IK Active", fn = "smallBoldLabelFont")
        cmds.text(l = "IK End Effector Name", fn = "smallBoldLabelFont")
        cmds.text(l = "IK Level", fn = "smallBoldLabelFont")
        cmds.text(l = "IK Position Data(IK)", fn = "smallBoldLabelFont")
        cmds.text(l = "IK Rotate Data(IR)", fn = "smallBoldLabelFont")
        cmds.text(l = "")
        cmds.text("ikFocus", l = "IK Lock: " + str(dIkid), fn = "smallBoldLabelFont")
        
        nbIKSlot = 4
        try:
            nbIKSlot = cmds.getAttr(actNode + ".nbIK")
        except:
            pass
        
        nbIKSlotLPre = 4
        try:
            nbIKSlotLPre = cmds.getAttr(actNode + ".nbIKLPre")
        except:
            pass
        
        for i in range(nbIKSlot):
            initIKSlot(actNode, i)
        
        cmds.setParent( '..' )
        
        cmds.rowColumnLayout(nc = 2, cw = [(1,150),(2,150)])
        cmds.button(l = "Expand IK Slot", c = 'McdExpandIKNum("' + actNode + '", 1)')
        cmds.button(l = "Shrink IK Slot", c = 'McdExpandIKNum("' + actNode + '", -1)')
        cmds.setParent("..")
        
        # ----------
        cmds.rowColumnLayout(nc = 13, cw = [(1, 40), \
                            (2, 1), (3, 50), (4, 50), (5, 1), \
                            (6, 24), (7,200), (8, 24), (9, 36), (10, 36), (11, 40), (12, 40), (13, 40)])
        
        cmds.text(l = "")
        cmds.text(l = "", fn = "smallBoldLabelFont")
        cmds.text(l = "In", fn = "smallBoldLabelFont")
        cmds.text(l = "Out", fn = "smallBoldLabelFont")
        cmds.text(l = "", fn = "smallBoldLabelFont")
        cmds.text(l = "")
        cmds.text(l = "Phase Preview", fn = "smallBoldLabelFont")
        cmds.text(l = "")
        cmds.text(l = "")
        cmds.text(l = "")
        cmds.text(l = "")
        cmds.text(l = "")
        cmds.text(l = "")
        
        for i in range(nbIKSlotLPre):
            initIKLockSlot(actNode, i, dLength)
                    
        cmds.setParent( '..' )
        
        cmds.rowColumnLayout(nc = 2, cw = [(1,150),(2,150)])
        cmds.button(l = "Expand", c = 'McdExpandPreviewSlotNum("' + actNode + '", 1)')
        cmds.button(l = "Shrink", c = 'McdExpandPreviewSlotNum("' + actNode + '", -1)')
        cmds.setParent("..")
        
    else:
        cmds.text(l = "Please select an active action node firstly.", fn = "smallBoldLabelFont")
    
    cmds.setParent( '..' )
    
    
    
    
    
    
    
    
    
    #------------------------------- Partial Blend Action --------------------------------#
    child2 = cmds.columnLayout(adj = True)
    if isAct == 1:
        cmds.rowColumnLayout(nc = 2, cw = [(1, 120), (2, 40)])
        cmds.text(l = "Enable Partial Blend", fn = "smallBoldLabelFont")
        cmds.checkBox("actenpb_cb", l = "", v = dEnPBlend, onc = 'setSingleNumericAttr(0, "actenpb_cb", "'+actNode+'", "pBlend")',\
                                                         ofc = 'setSingleNumericAttr(0, "actenpb_cb", "'+actNode+'", "pBlend")')
        cmds.setParent( '..' )
        
        if (dEnPBlend):
            
            i = 0;
            boneStringSet = []
            while(1):
                currentBoneName = cmds.getAttr(actNode + ".boneNameList[" + str(i) + "]")
                if currentBoneName == None or currentBoneName == "":
                    break
                if cmds.getAttr(actNode + ".blendList[" + str(i) + "]") == 1:
                    currentBoneName = "*       " + currentBoneName
                else:
                    currentBoneName = "        " + currentBoneName
                boneStringSet.append(currentBoneName)
                i += 1;
                    
            cmds.columnLayout(adj = True)
            cmds.textScrollList("blendlist_tsl", numberOfRows = 15, append = boneStringSet, ams = True)
            cmds.setParent( '..' )
            
            cmds.rowColumnLayout(nc = 2, cw = [(1, 120), (2, 120)])
            cmds.button(l = "Add Blend", c = 'mcd_on_blend("' + actNode + '")')
            cmds.button(l = "Remove Blend", c = 'mcd_off_blend("' + actNode + '")')
            cmds.setParent("..")
            
    else:
        cmds.text(l = "Please select an active action node firstly.", fn = "smallBoldLabelFont")
    
    cmds.setParent( '..' )
    
    
    
    
    
    
    
    
    #------------------------------- Phase Parse --------------------------------#
    child3 = cmds.columnLayout(adj = True)
    if isAct == 1:
        cmds.rowColumnLayout(nc = 10, cw = [(1,140),(2,120),(3,80),(4,80), (5,80), (6,80), (7,80), (8,20), (9,20), (10,30)])
        
        cmds.text(l = "Target Bone Name", fn = "smallBoldLabelFont")
        cmds.text(l = "Parse Type (0z/1y)", fn = "smallBoldLabelFont")
        cmds.text(l = "Phase Data", fn = "smallBoldLabelFont")
        cmds.text(l = "Period", fn = "smallBoldLabelFont") # parse
        cmds.text(l = "") # preview
        cmds.text(l = "") # preview
        cmds.text(l = "") # preview
        cmds.text(l = "") # preview
        cmds.text(l = "") # preview
        cmds.text(l = "") # preview
        
        dTargetName = cmds.getAttr(actNode + ".targetName")
        dParseType = cmds.getAttr(actNode + ".parseType")
        dPhaseData = cmds.getAttr(actNode + ".phaseData[0]")
        dPeriod = cmds.getAttr(actNode + ".period")

        # ik slot:
        cmds.textField("targetNameTF", tx = dTargetName, \
                    cc = 'setSingleNumericAttr(3, "targetNameTF", "'+actNode+'", "targetName")')
        cmds.intField("parseTypeIF", v = dParseType, \
                    cc = 'setSingleNumericAttr(1, "parseTypeIF", "'+actNode+'", "parseType")')
        
        
        if dPhaseData == -1:
            cmds.text("phaseDataAva", l = "n/a")
        else:
            cmds.text("phaseDataAva", l = "available")

        cmds.intField("periodIF", v = dPeriod, ed = False)
            
        cmds.button(l = "Parse", c = 'parsePhaseData("' + actNode + '")')
        McdAddLinkButton("Phase Graph", "https://basefount.atlassian.net/wiki/display/MDE/Phase+Based+Transition")
        
        cmds.button(l = "Update View", c = 'updatePhaseDataView("' + actNode + '")')
        
        cmds.button(l = "1", c = 'setPhaseData1("' + actNode + '")')
        cmds.button(l = "0", c = 'setPhaseData0("' + actNode + '")')
        cmds.button(l = "Sine", c = 'setPhaseDataSine("' + actNode + '")')
        
        cmds.setParent( '..' )
        
        
        # draw result:
        psrNodeList = createPhaseDataCurve(actNode)
        cmds.text(l = "Difference between Target Bone and Pelvis Data:", align = "left", fn = "smallBoldLabelFont") # preview
        cmds.gradientControl( "grad_action2", at = psrNodeList[1] + '.profileCurve', h  =60, en = False)
        cmds.text(l = "")
        cmds.text(l = "Phase Data:", align = "left", fn = "smallBoldLabelFont") # preview
        cmds.gradientControl( "grad_action", at = psrNodeList[0] + '.profileCurve', h  =100, en = False)
        

    else:
        cmds.text(l = "Please select an active action node firstly.", fn = "smallBoldLabelFont")
    
    cmds.setParent( '..' )
    
    
    
    
    
    
    
    #--------------------------  Phase Transition --------------------------#
    child4 = cmds.columnLayout(adj = True)
    
    if isAct == 1:
        
        dExitPNum = cmds.getAttr(actNode + ".exitPNum");
        dSamePhaseIn = cmds.getAttr(actNode + ".samePhaseIn")
        dLongLongMatch = cmds.getAttr(actNode + ".LLMatch")
        
        cmds.text(l = "Options:", fn = "smallBoldLabelFont", align = "left")
        cmds.checkBox("actSPI_cb", l = "Similar Phase Random In", v = dSamePhaseIn, onc = 'setSingleNumericAttr(0, "actSPI_cb", "'+actNode+'", "samePhaseIn")',\
                                                       ofc = 'setSingleNumericAttr(0, "actSPI_cb", "'+actNode+'", "samePhaseIn")')
        #cmds.checkBox("actLLM_cb", l = "Long Long Phase Match", v = dLongLongMatch, onc = 'setSingleNumericAttr(0, "actLLM_cb", "'+actNode+'", "LLMatch")',\
        #                                               ofc = 'setSingleNumericAttr(0, "actLLM_cb", "'+actNode+'", "LLMatch")')
        
        cmds.text(l = "") # -------------------------------------------------------
        
        cmds.text(l = "Exit Choices (Phase Range):", fn = "smallBoldLabelFont", align = "left")
        cmds.rowColumnLayout(nc = 6, cw = [(1,65),(2,120),(3,65),(4,60),(5,60),(6,60)])
        for i in range(dExitPNum):
            stri = str(i)
            dExitPAct = cmds.getAttr(actNode + ".exitPChoices[" + stri + "]")
            dExitStartPhase = cmds.getAttr(actNode + ".exitStartPhase[" + stri + "]")
            dExitEndPhase = cmds.getAttr(actNode + ".exitEndPhase[" + stri + "]")
            
            cmds.text(l = "To Action:")
            cmds.textField("actPExit" + stri, tx = dExitPAct, cc = 'setExitPAction('+ stri +', "' + actNode + '")')
            cmds.text(l = "Start Phase:")
            cmds.floatField("actSP_ff" + stri, min = 0, max = 1, v = dExitStartPhase, \
                                                cc = 'setIndexNumericAttr(2, ' +stri+ ', "actSP_ff", "'+actNode+'", "exitStartPhase")')
            cmds.text(l = "End Phase:")
            cmds.floatField("actEP_ff" + stri, min = 0, max = 1, v = dExitEndPhase, \
                                                cc = 'setIndexNumericAttr(2, ' +stri+ ', "actEP_ff", "'+actNode+'", "exitEndPhase")')

        cmds.setParent("..")
        
        cmds.rowColumnLayout(nc = 4, cw = [(1,150),(2,150),(3,30),(4,100)])
        cmds.button(l = "Expand Exits Slot", c = 'McdExpandExitPNum("' + actNode + '", 1)')
        cmds.button(l = "Shrink Exits Slot", c = 'McdExpandExitPNum("' + actNode + '", -1)')
        cmds.text(l = "")
        McdAddLinkButton("Phase Graph", "https://basefount.atlassian.net/wiki/display/MDE/Phase+Based+Transition")
        cmds.setParent("..")
        
        
    else:
        cmds.text(l = "Please select an active action node firstly.", fn = "smallBoldLabelFont")
                    
    cmds.setParent("..")
    
    
    
    
    
    
    
    
    
    
    #------------------------------- Instant Tips --------------------------------#
    child5 = cmds.columnLayout(adj = True)
    #separator(h = 10)
    cmds.text(l = "Tips for Action node editor", fn = "smallBoldLabelFont", align = "left")
    cmds.text(l = "# Exit Choices:", align = "left")
    cmds.text(l = '    Default you have only 4 slots for filling exits, for extra, modify the python code manually.',align = "left")
    cmds.text(l = '    If you have already specified the exit actions but not correct(name error), action will perform self cycle and not transit to next action', align = "left")
    cmds.text(l = '# IK Data:', align = "left")
    cmds.text(l = '    End effector position data of each frame in agent space', align = "left")
    cmds.text(l = '# IR Data (independent rotation):', align = "left")
    cmds.text(l = '    End effector Independent rotation data of each frame in agent space', align = "left")
    cmds.text(l = '# IK Lock Phase:', align = "left")
    cmds.text(l = '    Phase lock the end effector in world space ', align = "left")
    
    cmds.button(l = "Check detailed help", h = 40)
    
    cmds.setParent( '..' )

    cmds.tabLayout( tabs, edit=True,tabLabel=((child0, "Action Editor"),\
                                            (child1, "IK/IR Create"), \
                                            (child2, "Partial Blend"), \
                                            (child3, "Phase Parse"), \
                                            (child4, "Phase Transition"), \
                                            (child5, "Instant Tip")))
    cmds.showWindow(winName)


def McdRefreshActionEditor():
    McdActionEditorGUI()


def McdExitActionEditor():
    try:
        cmds.deleteUI("McdActionEditor")
    except:
        pass












