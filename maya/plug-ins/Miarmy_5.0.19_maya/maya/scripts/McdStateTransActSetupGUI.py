## +
## ===================================================================
## Copyright(C) 2010 - 2014 Basefount Software Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## Limitd. ("Basefount") and/or its licensors, which is
## protected by Chinese copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -


import maya.cmds as cmds
import maya.mel as mel
from McdGeneral import *

import McdStateTransActSetup
reload(McdStateTransActSetup)
from McdStateTransActSetup import *


def McdStateTransActSetupGUI():
    
    winName = "McdStateTransActSetup"
    if cmds.window(winName, ex = True):
        cmds.deleteUI(winName)
    
    # allAgtGrp = cmds.ls(type = "McdAgentGroup")
    # if not MIsBlank(allAgtGrp):
    #     for i in range(len(allAgtGrp)):
    #         if allAgtGrp[i].find(":") > 0:
    #             cmds.confirmDialog(t = "Error", m = "Cannot open editor it in reference mode.\nCannot edit Transition Map in reference mode")
    #             return
    
    globalNode = McdGetMcdGlobalNode()
        
    cmds.window(winName, title = "Transition Map Editor",rtf =True,menuBar=True, width=250)
    cmds.menu( label='Options')
    cmds.menuItem( label='Refresh contents', c = "McdRefreshStateTransActSetup()")
    cmds.menuItem( label='Help' )
    cmds.menuItem( divider=True )
    cmds.menuItem( label='Exit', c = "McdExitStateTransActSetupGUI()" )

    form = cmds.formLayout()
    tabs = cmds.tabLayout(innerMarginWidth=5, innerMarginHeight=5)
    cmds.formLayout( form, edit=True, attachForm=((tabs, 'top', 0), (tabs, 'left', 0), \
                                                (tabs, 'bottom', 0), (tabs, 'right', 0)) )
    
    #++++++++++++++++++++++++++++ Story List Setup +++++++++++++++++++++++++++++#
    asNode = ""
    stNode = ""
    selObj = cmds.ls(sl = True, long = True)
    if not MIsBlank(selObj):
        selType = cmds.nodeType(selObj[0])
        if selType == "McdState":
            stNode = selObj[0]
        elif selType == "McdActionShell":
            asNode = selObj[0]
            
    
    if asNode != "":
        if not McdCheckNodeActiveCmd(asNode):
            asNode = ""
            
    if stNode != "":
        if not McdCheckNodeActiveCmd(stNode):
            stNode = ""
            
        
    child0 = cmds.columnLayout(adj = True)
    
    if asNode != "":
        # transition action shell setup:
        
        cmds.rowColumnLayout(nc = 5, cw = [(1,100),(2,100),(3,100), (4,100), (5,100)])
        cmds.text(l = "Node Name:")
        cmds.textField("ASNodeTF", ed = False, tx = asNode)
        
        cmds.setParent("..")    
        selObj = cmds.ls(sl = True, long = True)
        
        cmds.rowColumnLayout(nc = 7, cw = [(1, 50), (2, 100), (3, 200), (4, 100), (5, 50), (6, 200), (7, 100)])
        
        # // line 1 ///////////////////////////////////////////////////////////////////////////
        # /////////////////////////////////////////////////////////////////////////////////////
        cmds.text(l = "")
        cmds.text(l = "")
        cmds.text(l = "Transition ActionShells")
        cmds.text(l = "")
        cmds.text(l = "")
        cmds.text(l = "Blends")
        cmds.text(l = "Blend Group")

        resultInfo = get2LinkStates(asNode)
        state1 = ""
        state2 = ""
        stateNode1 = ""
        stateNode2 = ""
        asList = []
        if not MIsBlank(resultInfo):
            state1 = resultInfo[0]
            state2 = resultInfo[1]
            stateNode1 = resultInfo[2]
            stateNode2 = resultInfo[3]
            for i in range(len(resultInfo)):
                if i < 4:
                    continue
                asList.append(resultInfo[i])
        
        # // line 2 ///////////////////////////////////////////////////////////////////////////
        # /////////////////////////////////////////////////////////////////////////////////////
        cmds.text(l = "")
        cmds.columnLayout(adj = True)
        for i in range(6):
            cmds.text(l = "")
        cmds.text("stateNode1", l = stateNode1, vis = False)
        cmds.text(l = state1 + "     ---->", fn = "boldLabelFont", align = "right")
        cmds.setParent("..")
        cmds.textScrollList("transAS_bnch", numberOfRows = 16, bgc = [0, 0, 0], append = asList, sc = "TM_BlendsScChange_TA('" + stNode + "')")
        cmds.columnLayout(adj = True)
        for i in range(6):
            cmds.text(l = "")
        cmds.text("stateNode2", l = stateNode2, vis = False)
        cmds.text(l = "---->     " + state2, fn = "boldLabelFont", align = "left")
        cmds.setParent("..")
        cmds.text(l = "")
        cmds.textScrollList("blends_bnch", numberOfRows = 16, append = [""], ams = True)
        cmds.textScrollList("blendG_bnch", numberOfRows = 16, append = [""])
        
        # // line 3 ///////////////////////////////////////////////////////////////////////////
        # /////////////////////////////////////////////////////////////////////////////////////
        cmds.text(l = "")
        cmds.text(l = "")
        cmds.rowColumnLayout(nc = 3, cw = [(1, 66), (2, 66), (3, 66)])
        cmds.button(l = "Create", c = "stateTransAddTransitionAction('" + asNode + "')")
        cmds.button(l = "Select Node", c = "stateTransSelectTransitionAction()")
        cmds.button(l = "Delete Node", c = "stateTransDeleteTransitionAction()")
        cmds.setParent("..")
        cmds.text(l = "")
        cmds.text(l = "")
        cmds.rowColumnLayout(nc = 4, cw = [(1, 40), (2, 40), (3, 40), (4, 80)])
        cmds.button(l = "Create", c = "TM_AddBlendAction_TA()")
        cmds.button(l = "Delete", c = "TM_DelBlendAction_TA()")
        cmds.button(l = "Select", c = "TM_SelBlendAction()")
        cmds.button(l = "Blend Group", c = "TM_AddBlendGToAction_TA()")
        cmds.setParent("..")
        cmds.button(l = "Remove Group", c = "TM_RemoveBlendGToAction_TA()")
        
        cmds.setParent("..")

    elif stNode != "":
        # transition action shell setup:
        
        cmds.rowColumnLayout(nc = 5, cw = [(1,100),(2,100),(3,100), (4,200), (5,100)])
        cmds.text(l = "Node Name:")
        cmds.textField("ASNodeTF", ed = False, tx = stNode)
        cmds.text(l = "")
        
        seg = stNode.split("|")[-1]
        seg2 = seg.split("_state_")[0]
        
        cmds.text(l = seg2, fn = "boldLabelFont")
        cmds.setParent("..")
        selObj = cmds.ls(sl = True, long = True)
        
        cmds.rowColumnLayout(nc = 5, cw = [(1, 200), (2, 100), (3, 200), (4, 200), (5, 100)])
        
        # // line 1
        cmds.text(l = "Actions in Group")
        cmds.text(l = "Action Group")
        cmds.text(l = "State ActionShells")
        cmds.text(l = "Blends")
        cmds.text(l = "Blend Group")

        
        # // line 2 ///////////////////////////////////////////////////////////////////////////
        # /////////////////////////////////////////////////////////////////////////////////////
        
        allActions = getAllActionsInfo(stNode)
        if MIsBlank(allActions):
            allActions = [""]
        
        allActionGrps = getAllActionGrpInfo(stNode)
        if allActionGrps == []:
            allActionGrps.append("")
            

        cmds.textScrollList("actionInG_bnch", numberOfRows = 16, append = [""], ams = True)
        cmds.textScrollList("actionG_bnch", numberOfRows = 16, append = allActionGrps, sc = "TM_actionGrpScChange('" + stNode + "')")
        cmds.textScrollList("actions_bnch", numberOfRows = 16, bgc = [0, 0, 0], append = allActions, ams = True, sc = "TM_BlendsScChange('" + stNode + "')")
        cmds.textScrollList("blends_bnch", numberOfRows = 16, append = [""], ams = True)
        cmds.textScrollList("blendG_bnch", numberOfRows = 16, append = [""])
        
        
        # // line 3
        cmds.rowColumnLayout(nc = 2, cw = [(1, 120), (2, 80)])
        cmds.button(l = "Remove from Group", c = "TM_UnMarkActionGroup('" + stNode + "')")
        cmds.button(l = "Set Weight", c = "TM_SetActionWeight('" + stNode + "')")
        cmds.setParent("..")
        cmds.text(l = "")
        cmds.rowColumnLayout(nc = 4, cw = [(1, 40), (2, 40), (3, 40), (4, 80)])
        cmds.button(l = "Create", c = "TM_AddCycleAction('" + stNode + "')")
        cmds.button(l = "Delete", c = "TM_DelCycleAction()")
        cmds.button(l = "Select", c = "TM_SelCycleAction()")
        cmds.button(l = "Action Group", c = "TM_MarkActionGroup('" + stNode + "')")
        cmds.setParent("..")
        cmds.rowColumnLayout(nc = 4, cw = [(1, 40), (2, 40), (3, 40), (4, 80)])
        cmds.button(l = "Create", c = "TM_AddBlendAction()")
        cmds.button(l = "Delete", c = "TM_DelBlendAction()")
        cmds.button(l = "Select", c = "TM_SelBlendAction()")
        cmds.button(l = "Blend Group", c = "TM_AddBlendGToAction()")
        cmds.setParent("..")
        cmds.button(l = "Remove Group", c = "TM_RemoveBlendGToAction()")
        
        cmds.setParent("..")

    else:
        cmds.columnLayout(adj  = 1)
        cmds.text(l = "Please select active state or transition point")
        cmds.setParent("..")
    
    
    cmds.setParent("..")
    
    
    #+++++++++++++++++++++++++++++++ Instant Tips ++++++++++++++++++++++++++++++++#
    child1 = cmds.columnLayout(adj = True)
    #separator(h = 10)
    cmds.text(l = "Instant Tips for Transition Map", fn = "smallBoldLabelFont", align = "left")
    cmds.text(l = "* State machine for arranging the pre-define actions.", align = "left")
    cmds.button(l = "Check detailed help", h = 40)
    
    cmds.setParent( '..' )
    #----------------------------- End Instant Tips -------------------------------#
    
    cmds.tabLayout( tabs, edit = True, tabLabel=((child0, "Setup"), (child1, "Instant Tips")))
    cmds.showWindow(winName)



def McdRefreshStateTransActSetup():
    McdStateTransActSetupGUI()

def McdExitStateTransActSetupGUI():
    try:
        cmds.deleteUI("McdStateTransActSetup")
    except:
        pass

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
