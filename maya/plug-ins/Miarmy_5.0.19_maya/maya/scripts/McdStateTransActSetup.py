## +
## ===================================================================
## Copyright(C) 2010 - 2014 Basefount Software Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## Limitd. ("Basefount") and/or its licensors, which is
## protected by Chinese copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

import maya.cmds as cmds
from McdGeneral import *
from McdStateTransActSetupGUI import *

def get2LinkStates(asNode):
    allConns = cmds.listConnections(asNode, s = True, d = False)
    if MIsBlank(allConns):
        return
    
    state1 = ""
    for i in range(len(allConns)):
        if cmds.nodeType(allConns[i]) == "McdState":
            state1 = allConns[i]
            break
    
    if state1 == "":
        return
    
    allConns = cmds.listConnections(asNode, d = True, s = False)
    if MIsBlank(allConns):
        return
    
    state2 = ""
    for i in range(len(allConns)):
        if cmds.nodeType(allConns[i]) == "McdState":
            state2 = allConns[i]
            break
    
    if state2 == "":
        return
    
    _2st_acts_ = []
    seg = state1.split("|")[-1]
    seg2 = seg.split("_state_")[0]
    _2st_acts_.append(seg2)
    
    seg = state2.split("|")[-1]
    seg2 = seg.split("_state_")[0]
    _2st_acts_.append(seg2)
    
    
    _2st_acts_.append(state1)
    _2st_acts_.append(state2)
    
    
    # get all actions:
    allS01Out = cmds.listConnections(state1, d = True, s = False)
    allS02In = cmds.listConnections(state2, d = False, s = True)
    
    allTransAct = []
    for m in range(len(allS01Out)):
        if MIndexOf(allS01Out[m], allS02In) > -1:
            allTransAct.append(allS01Out[m])
    
    allAs = []
    if allTransAct != []:
        for i in range(len(allTransAct)):
            if allTransAct[i].find("_actionShell_") > 0:
                seg = allTransAct[i].split("|")[-1]
                seg2 = seg.split("_actionShell_")[0]
                allAs.append(seg2)
    
    _2st_acts_.extend(allAs)
    
    
    return _2st_acts_
    
def stateTransAddTransitionAction(asNode):
    # get 2 states
    stateNode1 = cmds.text("stateNode1", q = True, l = True)
    stateNode2 = cmds.text("stateNode2", q = True, l = True)
    
    if stateNode1 == "" or stateNode2 == "":
        cmds.confirmDialog(t = "Error", m = "No source and target states detected.\nPlease frist establish the transition from source and target states.")
        return
    
    # create action shell by old way
    newAS = McdCreateActionShellCmd_OLD()
    
    # connect
    cmds.connectAttr(stateNode1 + ".exitAction", newAS + ".input")
    for i in range(100):
        stri = str(i)
        try:
            cmds.connectAttr(newAS + ".output", stateNode2 + ".entryAction[" + stri + "]")
            break
        except:
            pass
    
    # select action again;
    cmds.select(asNode)


def McdCreateActionShellCmd_OLD(prompt = True):
    allMcdGlobal = cmds.ls(type = "McdGlobal");
    stop = False;
    if allMcdGlobal == [] or allMcdGlobal == None:
        cmds.confirmDialog(t = "Error", m = "No found Miarmy Global, please create it in \"Miarmy > Miarmy Global\"")
        raise Exception("No found Miarmy Global, please create it in \"Miarmy > Miarmy Global\"")
    else:
        globalNode = allMcdGlobal[0]
        isValid = CheckStringIsValid(cmds.getAttr(globalNode + ".activeAgentName"))
        if isValid == False:
            cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
            raise Exception("Agent name in McdGlobal is not valid.")
    
    result = cmds.promptDialog( title='Specify Action Name:', message='Enter Action Shell Name:',\
                                button=['Create', 'Cancel'], defaultButton='Create', cancelButton='Cancel', dismissString='Cancel')
    newAction = ""
    if result == 'Create':
        newAction = cmds.promptDialog(query=True, text=True)
    else:
        raise
    
    if newAction != "":
        isValid = CheckStringIsValid(newAction)
        if isValid == False:
            cmds.confirmDialog(t = "Error", m = "New action shell name not valid.")
            raise Exception("New action shell name not valid.")
            
        if not isReferenceScene():
            activeAgentName = McdGetActiveAgentName()
            McdGetOrCreateActionShellGrp(activeAgentName, 1)
            newAS = McdCreateAction_OLD(newAction, activeAgentName, prompt)
        else:
            activeAgentName = McdGetActiveAgentName()
            newAS = McdCreateAction_OLDReference(newAction, activeAgentName, prompt)
        
    return newAS



def McdCreateAction_OLD(actionName, activeAgentName, prompt = True):
    actionNameLong = actionName + "_actionShell_" + activeAgentName
    temp = cmds.ls(actionNameLong)
    if temp == None or temp == []:
        cmds.createNode("McdActionShell", n = actionNameLong, ss = True)
        try:
            cmds.parent(actionNameLong, "ActionShell_" + activeAgentName)
        except:
            pass
    else:
        if prompt:
            cmds.confirmDialog(t = "Note", m = "ActionShell exist.")
            raise
    
    return actionNameLong


def McdCreateAction_OLDReference(actionName, activeAgentName, prompt = True):
    subActiveAgentName = getSubActiveAgentName(activeAgentName)
    
    actionNameLong = activeAgentName + ":" + actionName + "_actionShell_" + subActiveAgentName
    temp = cmds.ls(actionNameLong)
    if temp == None or temp == []:
        cmds.createNode("McdActionShell", n = actionNameLong, ss = True)
        try:
            cmds.parent(actionNameLong, activeAgentName + ":ActionShell_" + subActiveAgentName)
        except:
            pass
    else:
        if prompt:
            cmds.confirmDialog(t = "Note", m = "ActionShell exist.")
            raise
    
    return actionNameLong


def stateTransDeleteTransitionAction():
    
    # get name
    selAS = cmds.textScrollList("transAS_bnch", q = True, si = True)
    if MIsBlank(selAS):
        return
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    # find that node
    selASNode = selAS[0] + "_actionShell_" + agtName
    findNode = cmds.ls(selASNode)
    if not MIsBlank(findNode):
        cmds.delete(findNode[0])
        
    McdStateTransActSetupGUI()


def stateTransSelectTransitionAction():
    
    # get name
    selAS = cmds.textScrollList("transAS_bnch", q = True, si = True)
    if MIsBlank(selAS):
        return
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    # find that node
    selASNode = selAS[0] + "_actionShell_" + agtName
    findNode = cmds.ls(selASNode)
    if not MIsBlank(findNode):
        cmds.select(findNode[0])
    

def McdStoryListGetNodeNameFromGUI():
    storyListName = cmds.textField("StoryNodeTF", q = True, tx = True)
    return storyListName

















# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------

def TM_AddCycleAction(stNode):
    
    # create action shell by old way
    newAS = McdCreateActionShellCmd_OLD()
    
    # connect
    cmds.connectAttr(stNode + ".exitAction", newAS + ".input")
    for i in range(100):
        stri = str(i)
        try:
            cmds.connectAttr(newAS + ".output", stNode + ".entryAction[" + stri + "]")
            break
        except:
            pass
    
    # select action again;
    cmds.select(stNode)
    
    
def TM_DelCycleAction():
    
    # get name
    selAS = cmds.textScrollList("actions_bnch", q = True, si = True)
    if MIsBlank(selAS):
        return
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    
    # find that node
    if not isReferenceScene():
        selASNode = selAS[0] + "_actionShell_" + agtName
    else:
        subAgtName = getSubActiveAgentName(agtName)
        selASNode = selAS[0] + "_actionShell_" + subAgtName
    
    findNode = cmds.ls(selASNode)
    if not MIsBlank(findNode):
        cmds.delete(findNode[0])
    
    McdStateTransActSetupGUI()


def TM_SelCycleAction():
    
    # get name
    selAS = cmds.textScrollList("actions_bnch", q = True, si = True)
    if MIsBlank(selAS):
        return
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    
    # find that node
    if not isReferenceScene():
        selASNode = selAS[0] + "_actionShell_" + agtName
    else:
        subAgtName = getSubActiveAgentName(agtName)
        selASNode = selAS[0] + "_actionShell_" + subAgtName
        
    findNode = cmds.ls(selASNode)
    if not MIsBlank(findNode):
        cmds.select(findNode[0])


def getAllActionGrpInfo(stNode):
    
    allConns = cmds.listConnections(stNode, s = True, d = False)
    if MIsBlank(allConns):
        return
    
    allConns2 = cmds.listConnections(stNode, d = True, s = False)
    if MIsBlank(allConns2):
        return
    
    allStActions = []
    for m in range(len(allConns2)):
        if MIndexOf(allConns2[m], allConns) > -1:
            allStActions.append(allConns2[m])
    
    if MIsBlank(allStActions):
        return
    
    groupNameList = []
    for i in range(len(allStActions)):
        grpName = cmds.getAttr(allStActions[i] + ".group")
        if grpName != "" and grpName != None:
            if grpName not in groupNameList:
                groupNameList.append(grpName)
    
    return groupNameList;
    
    
def TM_actionGrpScChange(stNode):
    selAGrp = cmds.textScrollList("actionG_bnch", q = True, si = True)[0]
    
    allConns = cmds.listConnections(stNode, s = True, d = False)
    if MIsBlank(allConns):
        return
    
    allConns2 = cmds.listConnections(stNode, d = True, s = False)
    if MIsBlank(allConns2):
        return
    
    allStActions = []
    for m in range(len(allConns2)):
        if MIndexOf(allConns2[m], allConns) > -1:
            allStActions.append(allConns2[m])
    
    if MIsBlank(allStActions):
        return 
    
    thisGrpActions = []
    for i in range(len(allStActions)):
        grpName = cmds.getAttr(allStActions[i] + ".group")
        grpWeight = cmds.getAttr(allStActions[i] + ".weight")
        if grpName == selAGrp:
            seg = allStActions[i].split("|")[-1]
            seg2 = seg.split("_actionShell_")[0]
            thisGrpActions.append(seg2 + " : " + str(grpWeight))
            
    # fill text scroll list:
    if not MIsBlank(thisGrpActions):
        cmds.textScrollList("actionInG_bnch", e = True, ra = True)
        cmds.textScrollList("actionInG_bnch", e = True, append = thisGrpActions)




def getAllActionsInfo(stNode):
    allConns = cmds.listConnections(stNode, s = True, d = False)
    if MIsBlank(allConns):
        return
    
    allConns2 = cmds.listConnections(stNode, d = True, s = False)
    if MIsBlank(allConns2):
        return
    
    allStActions = []
    for m in range(len(allConns2)):
        if MIndexOf(allConns2[m], allConns) > -1:
            allStActions.append(allConns2[m])

    allActions = []
    if not MIsBlank(allStActions):
        for i in range(len(allStActions)):
            if cmds.nodeType(allStActions[i]) == "McdActionShell":
                seg = allStActions[i].split("|")[-1]
                seg2 = seg.split("_actionShell_")[0]
                allActions.append(seg2)

    
    return allActions




def TM_MarkActionGroup(stNode):
    
    # get name
    selAS = cmds.textScrollList("actions_bnch", q = True, si = True)
    if MIsBlank(selAS):
        return
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    
    
    # find that node
    option = cmds.promptDialog(t="Action Group",m = "Specify the action group name: ", \
                                                button = ["Assign", "Cancel"],\
                                                defaultButton = "Assign", cancelButton = "Cancel", \
                                                dismissString = "Cancel")
    if option == "Assign":
        for i in range(len(selAS)):
            newAction = cmds.promptDialog(query=True, text=True)
            
            if not isReferenceScene():
                selASNode = selAS[i] + "_actionShell_" + agtName
            else:
                subAgtName = getSubActiveAgentName(agtName)
                selASNode = selAS[i] + "_actionShell_" + subAgtName
    
            findNode = cmds.ls(selASNode)
            if not MIsBlank(findNode):
                if cmds.nodeType(findNode[0]) == "McdActionShell":
                    targetNode = findNode[0]
                    cmds.setAttr(targetNode + ".group", newAction, type = "string")
    else:
        return

    
    # get selection of act grp
    seltxt = cmds.textScrollList("actionG_bnch", q = True, si = True)
    
    # select it again
    allActionGrps = getAllActionGrpInfo(stNode)
    if allActionGrps != []:
        cmds.textScrollList("actionG_bnch", e = True, ra = True)
        cmds.textScrollList("actionG_bnch", e = True, append = allActionGrps)
        cmds.textScrollList("actionG_bnch", e = True, si = seltxt)
        
    # redraw it
    try:
        TM_actionGrpScChange(stNode)
    except:
        pass



def TM_UnMarkActionGroup(stNode):
    # get name
    selASRaw = cmds.textScrollList("actionInG_bnch", q = True, si = True)
    if MIsBlank(selASRaw):
        return
    
    selAS = []
    for i in range(len(selASRaw)):
        seg = selASRaw[i].split(" : ")[0]
        selAS.append(seg)
    
    # get agent type name
    nbSel = len(selAS)
    
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    # find that node
    subAgtName = ""
    if isReferenceScene():
        subAgtName = getSubActiveAgentName(agtName)
    for i in range(len(selAS)):
        
        if not isReferenceScene():
            selASNode = selAS[i] + "_actionShell_" + agtName
        else:
            subAgtName = getSubActiveAgentName(agtName)
            selASNode = selAS[i] + "_actionShell_" + subAgtName
        
        findNode = cmds.ls(selASNode)
        if not MIsBlank(findNode):
            cmds.setAttr(findNode[0] + ".group", "", type = "string")
        
        
    if cmds.textScrollList("actionInG_bnch", q = True, ni = True) == nbSel:
        McdStateTransActSetupGUI()
    else:
        TM_actionGrpScChange(stNode)



def TM_SetActionWeight(stNode):
    # get name
    selASRaw = cmds.textScrollList("actionInG_bnch", q = True, si = True)
    if MIsBlank(selASRaw):
        return
    
    result = cmds.promptDialog( title='Specify New Weight Value', message='New Weight:',\
                                button=['Setup', 'Cancel'], defaultButton='Setup', cancelButton='Cancel', dismissString='Cancel')
    setVal = 1
    if result == 'Setup':
        try:
            setVal = int(cmds.promptDialog(query=True, text=True))
        except:
            return
    else:
        return
    
    if setVal < 0:
        setVal = 0
    
    selAS = []
    for i in range(len(selASRaw)):
        seg = selASRaw[i].split(" : ")[0]
        selAS.append(seg)
    
    # get agent type name
    nbSel = len(selAS)
    
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    
    subAgtName = ""
    if isReferenceScene():
        subAgtName = getSubActiveAgentName(agtName)
    # find that node
    for i in range(len(selAS)):
        
        if not isReferenceScene():
            selASNode = selAS[i] + "_actionShell_" + agtName
        else:
            subAgtName = getSubActiveAgentName(agtName)
            selASNode = selAS[i] + "_actionShell_" + subAgtName
        
        findNode = cmds.ls(selASNode)
        if not MIsBlank(findNode):
            cmds.setAttr(findNode[0] + ".weight", setVal)
        
        
    TM_actionGrpScChange(stNode)
        


def TM_BlendsScChange_TA(stNode):

    # get name
    selAS = cmds.textScrollList("transAS_bnch", q = True, si = True)
    if MIsBlank(selAS):
        return
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    # find that node
    selASNode = selAS[0] + "_actionShell_" + agtName
    findNode = cmds.ls(selASNode)
    if not MIsBlank(findNode):
        
        # get all blends
        allConns = cmds.listConnections(findNode[0], s = True, d = False)
        allBlends = []
        allBGroups = []
        if not MIsBlank(allConns):
            for i in range(len(allConns)):
                if cmds.nodeType(allConns[i]) == "McdActionShell":
                    bgroup = cmds.getAttr(allConns[i] + ".bgroup")
                    if bgroup == None:
                        bgroup = ""
                    allBGroups.append(bgroup)
                    
                    seg = allConns[i].split("|")[-1]
                    seg2 = seg.split("_actionShell_")[0]
                    allBlends.append(seg2)
                    
        if allBlends != []:
            cmds.textScrollList("blends_bnch", e = True, ra = True)
            cmds.textScrollList("blends_bnch", e = True, append = allBlends)
            cmds.textScrollList("blendG_bnch", e = True, ra = True)
            cmds.textScrollList("blendG_bnch", e = True, append = allBGroups)
            
        else:
            cmds.textScrollList("blends_bnch", e = True, ra = True)
            cmds.textScrollList("blendG_bnch", e = True, ra = True)

def TM_BlendsScChange(stNode):

    # get name
    selAS = cmds.textScrollList("actions_bnch", q = True, si = True)
    if MIsBlank(selAS):
        return
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    # find that node
    selASNode = selAS[0] + "_actionShell_" + agtName
    findNode = cmds.ls(selASNode)
    if not MIsBlank(findNode):
        
        # get all blends
        allConns = cmds.listConnections(findNode[0], s = True, d = False)
        allBlends = []
        allBGroups = []
        if not MIsBlank(allConns):
            for i in range(len(allConns)):
                if cmds.nodeType(allConns[i]) == "McdActionShell":
                    bgroup = cmds.getAttr(allConns[i] + ".bgroup")
                    if bgroup == None:
                        bgroup = ""
                    allBGroups.append(bgroup)
                    
                    seg = allConns[i].split("|")[-1]
                    seg2 = seg.split("_actionShell_")[0]
                    allBlends.append(seg2)
                    
        if allBlends != []:
            cmds.textScrollList("blends_bnch", e = True, ra = True)
            cmds.textScrollList("blends_bnch", e = True, append = allBlends)
            cmds.textScrollList("blendG_bnch", e = True, ra = True)
            cmds.textScrollList("blendG_bnch", e = True, append = allBGroups)
            
        else:
            cmds.textScrollList("blends_bnch", e = True, ra = True)
            cmds.textScrollList("blendG_bnch", e = True, ra = True)
            







# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# blends -----------------------------------------------------------------------

def TM_AddBlendAction_TA():
    
    # get selection action1
    selAS = cmds.textScrollList("transAS_bnch", q = True, si = True)
    if MIsBlank(selAS):
        return
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if not isValid:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    # find that node
    
    newAS = McdCreateActionShellCmd_OLD(False)
    
    for i in range(len(selAS)):
        selASNode = selAS[i] + "_actionShell_" + agtName
        findNode = cmds.ls(selASNode)
        if MIsBlank(findNode):
            cmds.confirmDialog(t = "Error", m = "Cannot find host action shell.")
            return
        
        # create action2
        # create action shell by old way
        
         # connect 2 -> 1
        for i in range(100):
            stri = str(i)
            try:
                cmds.connectAttr(newAS + ".output", findNode[0] + ".blends[" + stri + "]")
                break
            except:
                pass
            
        seg = newAS.split("|")[-1]
        seg2 = seg.split("_actionShell_")[0]
            
    # refresh blend scroll
    cmds.textScrollList("blends_bnch", e = True, append = [seg2])

def TM_AddBlendAction():
    
    # get selection action1
    selAS = cmds.textScrollList("actions_bnch", q = True, si = True)
    if MIsBlank(selAS):
        return
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if not isValid:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    # find that node
    
    newAS = McdCreateActionShellCmd_OLD(False)
    
    for i in range(len(selAS)):
        selASNode = selAS[i] + "_actionShell_" + agtName
        findNode = cmds.ls(selASNode)
        if MIsBlank(findNode):
            cmds.confirmDialog(t = "Error", m = "Cannot find host action shell.")
            return
        
        # create action2
        # create action shell by old way
        
         # connect 2 -> 1
        for i in range(100):
            stri = str(i)
            try:
                cmds.connectAttr(newAS + ".output", findNode[0] + ".blends[" + stri + "]")
                break
            except:
                pass
            
        seg = newAS.split("|")[-1]
        seg2 = seg.split("_actionShell_")[0]
            
    # refresh blend scroll
    cmds.textScrollList("blends_bnch", e = True, append = [seg2])


def TM_DelBlendAction_TA():
    
    # get blend action
    # delete
    # refresh blend scroll/group scroll

    # get name
    selAS = cmds.textScrollList("blends_bnch", q = True, si = True)
    if MIsBlank(selAS):
        return
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    # find that node
    
    for i in range(len(selAS)):
        selASNode = selAS[i] + "_actionShell_" + agtName
        findNode = cmds.ls(selASNode)
        if not MIsBlank(findNode):
            cmds.delete(findNode[0])
    
    
    # refresh blends and blends group
    TM_BlendsScChange_TA(".")
    

def TM_DelBlendAction():
    
    # get blend action
    # delete
    # refresh blend scroll/group scroll

    # get name
    selAS = cmds.textScrollList("blends_bnch", q = True, si = True)
    if MIsBlank(selAS):
        return
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    # find that node
    
    for i in range(len(selAS)):
        selASNode = selAS[i] + "_actionShell_" + agtName
        findNode = cmds.ls(selASNode)
        if not MIsBlank(findNode):
            cmds.delete(findNode[0])
    
    
    # refresh blends and blends group
    TM_BlendsScChange(".")

def TM_AddBlendGToAction_TA():
    
    # get name
    selAS = cmds.textScrollList("blends_bnch", q = True, si = True)
    if MIsBlank(selAS):
        return
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    
    
    # find that node
    option = cmds.promptDialog(t="Blend Group",m = "Specify the blend group name: ", \
                                                button = ["Assign", "Cancel"],\
                                                defaultButton = "Assign", cancelButton = "Cancel", \
                                                dismissString = "Cancel")
    if option == "Assign":
        for i in range(len(selAS)):
            newAction = cmds.promptDialog(query=True, text=True)
            selASNode = selAS[i] + "_actionShell_" + agtName
            findNode = cmds.ls(selASNode)
            if not MIsBlank(findNode):
                if cmds.nodeType(findNode[0]) == "McdActionShell":
                    targetNode = findNode[0]
                    cmds.setAttr(targetNode + ".bgroup", newAction, type = "string")
    else:
        return
    
    # refresh blend g list:
    TM_BlendsScChange_TA(".")


def TM_AddBlendGToAction():
    
    # get name
    selAS = cmds.textScrollList("blends_bnch", q = True, si = True)
    if MIsBlank(selAS):
        return
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    
    
    # find that node
    option = cmds.promptDialog(t="Blend Group",m = "Specify the blend group name: ", \
                                                button = ["Assign", "Cancel"],\
                                                defaultButton = "Assign", cancelButton = "Cancel", \
                                                dismissString = "Cancel")
    if option == "Assign":
        for i in range(len(selAS)):
            newAction = cmds.promptDialog(query=True, text=True)
            selASNode = selAS[i] + "_actionShell_" + agtName
            findNode = cmds.ls(selASNode)
            if not MIsBlank(findNode):
                if cmds.nodeType(findNode[0]) == "McdActionShell":
                    targetNode = findNode[0]
                    cmds.setAttr(targetNode + ".bgroup", newAction, type = "string")
    else:
        return
    
    # refresh blend g list:
    TM_BlendsScChange(".")


def TM_SelBlendAction():
    # get name
    selAS = cmds.textScrollList("blends_bnch", q = True, si = True)
    if MIsBlank(selAS):
        return
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    # find that node
    selASNode = selAS[0] + "_actionShell_" + agtName
    findNode = cmds.ls(selASNode)
    if not MIsBlank(findNode):
        cmds.select(findNode[0])


def TM_RemoveBlendGToAction_TA():
    
    # get name
    allAS = cmds.textScrollList("blends_bnch", q = True, ai = True)
    allASBG = cmds.textScrollList("blendG_bnch", q = True, ai = True)
    selASIdx = cmds.textScrollList("blendG_bnch", q = True, sii = True)
    if MIsBlank(selASIdx) or MIsBlank(allAS):
        return
    
    if len(allAS) != len(allASBG):
        return
    
    print selASIdx
    print allAS
    
    # get selAS
    selAS = []
    for i in range(len(selASIdx)):
        idx = selASIdx[i] - 1
        selAS.append(allAS[idx])
        
    print selAS
    
    
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    
    # find that node
    for i in range(len(selAS)):
        selASNode = selAS[i] + "_actionShell_" + agtName
        findNode = cmds.ls(selASNode)
        if not MIsBlank(findNode):
            if cmds.nodeType(findNode[0]) == "McdActionShell":
                cmds.setAttr(findNode[0] + ".bgroup", "", type = "string")

    
    # refresh blend g list:
    TM_BlendsScChange_TA(".")


def TM_RemoveBlendGToAction():
    
    # get name
    allAS = cmds.textScrollList("blends_bnch", q = True, ai = True)
    allASBG = cmds.textScrollList("blendG_bnch", q = True, ai = True)
    selASIdx = cmds.textScrollList("blendG_bnch", q = True, sii = True)
    if MIsBlank(selASIdx) or MIsBlank(allAS):
        return
    
    if len(allAS) != len(allASBG):
        return
    
    print selASIdx
    print allAS
    
    # get selAS
    selAS = []
    for i in range(len(selASIdx)):
        idx = selASIdx[i] - 1
        selAS.append(allAS[idx])
        
    print selAS
    
    
    # get agent type name
    globalNode = McdGetMcdGlobalNode()
    agtName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(agtName)
    if isValid == False:
        cmds.confirmDialog(t = "Error", m = "Agent name in McdGlobal is not valid.")
        raise Exception("Agent name in McdGlobal is not valid.")
    
    # find that node
    for i in range(len(selAS)):
        selASNode = selAS[i] + "_actionShell_" + agtName
        findNode = cmds.ls(selASNode)
        if not MIsBlank(findNode):
            if cmds.nodeType(findNode[0]) == "McdActionShell":
                cmds.setAttr(findNode[0] + ".bgroup", "", type = "string")

    
    # refresh blend g list:
    TM_BlendsScChange(".")









    
    
    
    
    
    
    
    
    
